<?php
namespace Line;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class ApplicationType {
  const IOS = 16;
  const IOS_RC = 17;
  const IOS_BETA = 18;
  const IOS_ALPHA = 19;
  const ANDROID = 32;
  const ANDROID_RC = 33;
  const ANDROID_BETA = 34;
  const ANDROID_ALPHA = 35;
  const WAP = 48;
  const WAP_RC = 49;
  const WAP_BETA = 50;
  const WAP_ALPHA = 51;
  const BOT = 64;
  const BOT_RC = 65;
  const BOT_BETA = 66;
  const BOT_ALPHA = 67;
  const WEB = 80;
  const WEB_RC = 81;
  const WEB_BETA = 82;
  const WEB_ALPHA = 83;
  const DESKTOPWIN = 96;
  const DESKTOPWIN_RC = 97;
  const DESKTOPWIN_BETA = 98;
  const DESKTOPWIN_ALPHA = 99;
  const DESKTOPMAC = 112;
  const DESKTOPMAC_RC = 113;
  const DESKTOPMAC_BETA = 114;
  const DESKTOPMAC_ALPHA = 115;
  const CHANNELGW = 128;
  const CHANNELGW_RC = 129;
  const CHANNELGW_BETA = 130;
  const CHANNELGW_ALPHA = 131;
  const CHANNELCP = 144;
  const CHANNELCP_RC = 145;
  const CHANNELCP_BETA = 146;
  const CHANNELCP_ALPHA = 147;
  const WINPHONE = 160;
  const WINPHONE_RC = 161;
  const WINPHONE_BETA = 162;
  const WINPHONE_ALPHA = 163;
  const BLACKBERRY = 176;
  const BLACKBERRY_RC = 177;
  const BLACKBERRY_BETA = 178;
  const BLACKBERRY_ALPHA = 179;
  const WINMETRO = 192;
  const WINMETRO_RC = 193;
  const WINMETRO_BETA = 194;
  const WINMETRO_ALPHA = 195;
  const S40 = 208;
  const S40_RC = 209;
  const S40_BETA = 210;
  const S40_ALPHA = 211;
  const CHRONO = 224;
  const CHRONO_RC = 225;
  const CHRONO_BETA = 226;
  const CHRONO_ALPHA = 227;
  const TIZEN = 256;
  const TIZEN_RC = 257;
  const TIZEN_BETA = 258;
  const TIZEN_ALPHA = 259;
  const VIRTUAL = 272;
  static public $__names = array(
    16 => 'IOS',
    17 => 'IOS_RC',
    18 => 'IOS_BETA',
    19 => 'IOS_ALPHA',
    32 => 'ANDROID',
    33 => 'ANDROID_RC',
    34 => 'ANDROID_BETA',
    35 => 'ANDROID_ALPHA',
    48 => 'WAP',
    49 => 'WAP_RC',
    50 => 'WAP_BETA',
    51 => 'WAP_ALPHA',
    64 => 'BOT',
    65 => 'BOT_RC',
    66 => 'BOT_BETA',
    67 => 'BOT_ALPHA',
    80 => 'WEB',
    81 => 'WEB_RC',
    82 => 'WEB_BETA',
    83 => 'WEB_ALPHA',
    96 => 'DESKTOPWIN',
    97 => 'DESKTOPWIN_RC',
    98 => 'DESKTOPWIN_BETA',
    99 => 'DESKTOPWIN_ALPHA',
    112 => 'DESKTOPMAC',
    113 => 'DESKTOPMAC_RC',
    114 => 'DESKTOPMAC_BETA',
    115 => 'DESKTOPMAC_ALPHA',
    128 => 'CHANNELGW',
    129 => 'CHANNELGW_RC',
    130 => 'CHANNELGW_BETA',
    131 => 'CHANNELGW_ALPHA',
    144 => 'CHANNELCP',
    145 => 'CHANNELCP_RC',
    146 => 'CHANNELCP_BETA',
    147 => 'CHANNELCP_ALPHA',
    160 => 'WINPHONE',
    161 => 'WINPHONE_RC',
    162 => 'WINPHONE_BETA',
    163 => 'WINPHONE_ALPHA',
    176 => 'BLACKBERRY',
    177 => 'BLACKBERRY_RC',
    178 => 'BLACKBERRY_BETA',
    179 => 'BLACKBERRY_ALPHA',
    192 => 'WINMETRO',
    193 => 'WINMETRO_RC',
    194 => 'WINMETRO_BETA',
    195 => 'WINMETRO_ALPHA',
    208 => 'S40',
    209 => 'S40_RC',
    210 => 'S40_BETA',
    211 => 'S40_ALPHA',
    224 => 'CHRONO',
    225 => 'CHRONO_RC',
    226 => 'CHRONO_BETA',
    227 => 'CHRONO_ALPHA',
    256 => 'TIZEN',
    257 => 'TIZEN_RC',
    258 => 'TIZEN_BETA',
    259 => 'TIZEN_ALPHA',
    272 => 'VIRTUAL',
  );
}

final class CarrierCode {
  const NOT_SPECIFIED = 0;
  const JP_DOCOMO = 1;
  const JP_AU = 2;
  const JP_SOFTBANK = 3;
  const KR_SKT = 17;
  const KR_KT = 18;
  const KR_LGT = 19;
  static public $__names = array(
    0 => 'NOT_SPECIFIED',
    1 => 'JP_DOCOMO',
    2 => 'JP_AU',
    3 => 'JP_SOFTBANK',
    17 => 'KR_SKT',
    18 => 'KR_KT',
    19 => 'KR_LGT',
  );
}

final class ContactRelation {
  const ONEWAY = 0;
  const BOTH = 1;
  const NOT_REGISTERED = 2;
  static public $__names = array(
    0 => 'ONEWAY',
    1 => 'BOTH',
    2 => 'NOT_REGISTERED',
  );
}

final class ContactSetting {
  const CONTACT_SETTING_NOTIFICATION_DISABLE = 1;
  const CONTACT_SETTING_DISPLAY_NAME_OVERRIDE = 2;
  const CONTACT_SETTING_CONTACT_HIDE = 4;
  const CONTACT_SETTING_FAVORITE = 8;
  const CONTACT_SETTING_DELETE = 16;
  static public $__names = array(
    1 => 'CONTACT_SETTING_NOTIFICATION_DISABLE',
    2 => 'CONTACT_SETTING_DISPLAY_NAME_OVERRIDE',
    4 => 'CONTACT_SETTING_CONTACT_HIDE',
    8 => 'CONTACT_SETTING_FAVORITE',
    16 => 'CONTACT_SETTING_DELETE',
  );
}

final class ContactStatus {
  const UNSPECIFIED = 0;
  const FRIEND = 1;
  const FRIEND_BLOCKED = 2;
  const RECOMMEND = 3;
  const RECOMMEND_BLOCKED = 4;
  const DELETED = 5;
  const DELETED_BLOCKED = 6;
  static public $__names = array(
    0 => 'UNSPECIFIED',
    1 => 'FRIEND',
    2 => 'FRIEND_BLOCKED',
    3 => 'RECOMMEND',
    4 => 'RECOMMEND_BLOCKED',
    5 => 'DELETED',
    6 => 'DELETED_BLOCKED',
  );
}

final class ContactType {
  const MID = 0;
  const PHONE = 1;
  const EMAIL = 2;
  const USERID = 3;
  const PROXIMITY = 4;
  const GROUP = 5;
  const USER = 6;
  const QRCODE = 7;
  const PROMOTION_BOT = 8;
  const REPAIR = 128;
  const FACEBOOK = 2305;
  const SINA = 2306;
  const RENREN = 2307;
  const FEIXIN = 2308;
  static public $__names = array(
    0 => 'MID',
    1 => 'PHONE',
    2 => 'EMAIL',
    3 => 'USERID',
    4 => 'PROXIMITY',
    5 => 'GROUP',
    6 => 'USER',
    7 => 'QRCODE',
    8 => 'PROMOTION_BOT',
    128 => 'REPAIR',
    2305 => 'FACEBOOK',
    2306 => 'SINA',
    2307 => 'RENREN',
    2308 => 'FEIXIN',
  );
}

final class ContentType {
  const NONE = 0;
  const IMAGE = 1;
  const VIDEO = 2;
  const AUDIO = 3;
  const HTML = 4;
  const PDF = 5;
  const CALL = 6;
  const STICKER = 7;
  const PRESENCE = 8;
  const GIFT = 9;
  const GROUPBOARD = 10;
  const APPLINK = 11;
  const LINK = 12;
  const CONTACT = 13;
  const FILE = 14;
  const LOCATION = 15;
  const POSTNOTIFICATION = 16;
  const RICH = 17;
  const CHATEVENT = 18;
  static public $__names = array(
    0 => 'NONE',
    1 => 'IMAGE',
    2 => 'VIDEO',
    3 => 'AUDIO',
    4 => 'HTML',
    5 => 'PDF',
    6 => 'CALL',
    7 => 'STICKER',
    8 => 'PRESENCE',
    9 => 'GIFT',
    10 => 'GROUPBOARD',
    11 => 'APPLINK',
    12 => 'LINK',
    13 => 'CONTACT',
    14 => 'FILE',
    15 => 'LOCATION',
    16 => 'POSTNOTIFICATION',
    17 => 'RICH',
    18 => 'CHATEVENT',
  );
}

final class CustomMode {
  const PROMOTION_FRIENDS_INVITE = 1;
  const CAPABILITY_SERVER_SIDE_SMS = 2;
  const LINE_CLIENT_ANALYTICS_CONFIGURATION = 3;
  static public $__names = array(
    1 => 'PROMOTION_FRIENDS_INVITE',
    2 => 'CAPABILITY_SERVER_SIDE_SMS',
    3 => 'LINE_CLIENT_ANALYTICS_CONFIGURATION',
  );
}

final class EmailConfirmationStatus {
  const NOT_SPECIFIED = 0;
  const NOT_YET = 1;
  const DONE = 3;
  static public $__names = array(
    0 => 'NOT_SPECIFIED',
    1 => 'NOT_YET',
    3 => 'DONE',
  );
}

final class EmailConfirmationType {
  const SERVER_SIDE_EMAIL = 0;
  const CLIENT_SIDE_EMAIL = 1;
  static public $__names = array(
    0 => 'SERVER_SIDE_EMAIL',
    1 => 'CLIENT_SIDE_EMAIL',
  );
}

final class ErrorCode {
  const ILLEGAL_ARGUMENT = 0;
  const AUTHENTICATION_FAILED = 1;
  const DB_FAILED = 2;
  const INVALID_STATE = 3;
  const EXCESSIVE_ACCESS = 4;
  const NOT_FOUND = 5;
  const INVALID_LENGTH = 6;
  const NOT_AVAILABLE_USER = 7;
  const NOT_AUTHORIZED_DEVICE = 8;
  const INVALID_MID = 9;
  const NOT_A_MEMBER = 10;
  const INCOMPATIBLE_APP_VERSION = 11;
  const NOT_READY = 12;
  const NOT_AVAILABLE_SESSION = 13;
  const NOT_AUTHORIZED_SESSION = 14;
  const SYSTEM_ERROR = 15;
  const NO_AVAILABLE_VERIFICATION_METHOD = 16;
  const NOT_AUTHENTICATED = 17;
  const INVALID_IDENTITY_CREDENTIAL = 18;
  const NOT_AVAILABLE_IDENTITY_IDENTIFIER = 19;
  const INTERNAL_ERROR = 20;
  const NO_SUCH_IDENTITY_IDENFIER = 21;
  const DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY = 22;
  const ILLEGAL_IDENTITY_CREDENTIAL = 23;
  const UNKNOWN_CHANNEL = 24;
  const NO_SUCH_MESSAGE_BOX = 25;
  const NOT_AVAILABLE_MESSAGE_BOX = 26;
  const CHANNEL_DOES_NOT_MATCH = 27;
  const NOT_YOUR_MESSAGE = 28;
  const MESSAGE_DEFINED_ERROR = 29;
  const USER_CANNOT_ACCEPT_PRESENTS = 30;
  const USER_NOT_STICKER_OWNER = 32;
  const MAINTENANCE_ERROR = 33;
  const ACCOUNT_NOT_MATCHED = 34;
  const ABUSE_BLOCK = 35;
  const NOT_FRIEND = 36;
  const NOT_ALLOWED_CALL = 37;
  const BLOCK_FRIEND = 38;
  const INCOMPATIBLE_VOIP_VERSION = 39;
  const INVALID_SNS_ACCESS_TOKEN = 40;
  const EXTERNAL_SERVICE_NOT_AVAILABLE = 41;
  const NOT_ALLOWED_ADD_CONTACT = 42;
  const NOT_CERTIFICATED = 43;
  const NOT_ALLOWED_SECONDARY_DEVICE = 44;
  const INVALID_PIN_CODE = 45;
  const NOT_FOUND_IDENTITY_CREDENTIAL = 46;
  const EXCEED_FILE_MAX_SIZE = 47;
  const EXCEED_DAILY_QUOTA = 48;
  const NOT_SUPPORT_SEND_FILE = 49;
  const MUST_UPGRADE = 50;
  const NOT_AVAILABLE_PIN_CODE_SESSION = 51;
  static public $__names = array(
    0 => 'ILLEGAL_ARGUMENT',
    1 => 'AUTHENTICATION_FAILED',
    2 => 'DB_FAILED',
    3 => 'INVALID_STATE',
    4 => 'EXCESSIVE_ACCESS',
    5 => 'NOT_FOUND',
    6 => 'INVALID_LENGTH',
    7 => 'NOT_AVAILABLE_USER',
    8 => 'NOT_AUTHORIZED_DEVICE',
    9 => 'INVALID_MID',
    10 => 'NOT_A_MEMBER',
    11 => 'INCOMPATIBLE_APP_VERSION',
    12 => 'NOT_READY',
    13 => 'NOT_AVAILABLE_SESSION',
    14 => 'NOT_AUTHORIZED_SESSION',
    15 => 'SYSTEM_ERROR',
    16 => 'NO_AVAILABLE_VERIFICATION_METHOD',
    17 => 'NOT_AUTHENTICATED',
    18 => 'INVALID_IDENTITY_CREDENTIAL',
    19 => 'NOT_AVAILABLE_IDENTITY_IDENTIFIER',
    20 => 'INTERNAL_ERROR',
    21 => 'NO_SUCH_IDENTITY_IDENFIER',
    22 => 'DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY',
    23 => 'ILLEGAL_IDENTITY_CREDENTIAL',
    24 => 'UNKNOWN_CHANNEL',
    25 => 'NO_SUCH_MESSAGE_BOX',
    26 => 'NOT_AVAILABLE_MESSAGE_BOX',
    27 => 'CHANNEL_DOES_NOT_MATCH',
    28 => 'NOT_YOUR_MESSAGE',
    29 => 'MESSAGE_DEFINED_ERROR',
    30 => 'USER_CANNOT_ACCEPT_PRESENTS',
    32 => 'USER_NOT_STICKER_OWNER',
    33 => 'MAINTENANCE_ERROR',
    34 => 'ACCOUNT_NOT_MATCHED',
    35 => 'ABUSE_BLOCK',
    36 => 'NOT_FRIEND',
    37 => 'NOT_ALLOWED_CALL',
    38 => 'BLOCK_FRIEND',
    39 => 'INCOMPATIBLE_VOIP_VERSION',
    40 => 'INVALID_SNS_ACCESS_TOKEN',
    41 => 'EXTERNAL_SERVICE_NOT_AVAILABLE',
    42 => 'NOT_ALLOWED_ADD_CONTACT',
    43 => 'NOT_CERTIFICATED',
    44 => 'NOT_ALLOWED_SECONDARY_DEVICE',
    45 => 'INVALID_PIN_CODE',
    46 => 'NOT_FOUND_IDENTITY_CREDENTIAL',
    47 => 'EXCEED_FILE_MAX_SIZE',
    48 => 'EXCEED_DAILY_QUOTA',
    49 => 'NOT_SUPPORT_SEND_FILE',
    50 => 'MUST_UPGRADE',
    51 => 'NOT_AVAILABLE_PIN_CODE_SESSION',
  );
}

final class FeatureType {
  const OBJECT_STORAGE = 1;
  static public $__names = array(
    1 => 'OBJECT_STORAGE',
  );
}

final class IdentityProvider {
  const UNKNOWN = 0;
  const LINE = 1;
  const NAVER_KR = 2;
  static public $__names = array(
    0 => 'UNKNOWN',
    1 => 'LINE',
    2 => 'NAVER_KR',
  );
}

final class LoginResultType {
  const SUCCESS = 1;
  const REQUIRE_QRCODE = 2;
  const REQUIRE_DEVICE_CONFIRM = 3;
  static public $__names = array(
    1 => 'SUCCESS',
    2 => 'REQUIRE_QRCODE',
    3 => 'REQUIRE_DEVICE_CONFIRM',
  );
}

final class MIDType {
  const USER = 0;
  const ROOM = 1;
  const GROUP = 2;
  static public $__names = array(
    0 => 'USER',
    1 => 'ROOM',
    2 => 'GROUP',
  );
}

final class ModificationType {
  const ADD = 0;
  const REMOVE = 1;
  const MODIFY = 2;
  static public $__names = array(
    0 => 'ADD',
    1 => 'REMOVE',
    2 => 'MODIFY',
  );
}

final class NotificationStatus {
  const NOTIFICATION_ITEM_EXIST = 1;
  const TIMELINE_ITEM_EXIST = 2;
  const NOTE_GROUP_NEW_ITEM_EXIST = 4;
  const TIMELINE_BUDDYGROUP_CHANGED = 8;
  const NOTE_ONE_TO_ONE_NEW_ITEM_EXIST = 16;
  const ALBUM_ITEM_EXIST = 32;
  const TIMELINE_ITEM_DELETED = 64;
  static public $__names = array(
    1 => 'NOTIFICATION_ITEM_EXIST',
    2 => 'TIMELINE_ITEM_EXIST',
    4 => 'NOTE_GROUP_NEW_ITEM_EXIST',
    8 => 'TIMELINE_BUDDYGROUP_CHANGED',
    16 => 'NOTE_ONE_TO_ONE_NEW_ITEM_EXIST',
    32 => 'ALBUM_ITEM_EXIST',
    64 => 'TIMELINE_ITEM_DELETED',
  );
}

final class NotificationType {
  const APPLE_APNS = 1;
  const GOOGLE_C2DM = 2;
  const NHN_NNI = 3;
  const SKT_AOM = 4;
  const MS_MPNS = 5;
  const RIM_BIS = 6;
  const GOOGLE_GCM = 7;
  const NOKIA_NNAPI = 8;
  const TIZEN = 9;
  const LINE_BOT = 17;
  const LINE_WAP = 18;
  static public $__names = array(
    1 => 'APPLE_APNS',
    2 => 'GOOGLE_C2DM',
    3 => 'NHN_NNI',
    4 => 'SKT_AOM',
    5 => 'MS_MPNS',
    6 => 'RIM_BIS',
    7 => 'GOOGLE_GCM',
    8 => 'NOKIA_NNAPI',
    9 => 'TIZEN',
    17 => 'LINE_BOT',
    18 => 'LINE_WAP',
  );
}

final class OpStatus {
  const NORMAL = 0;
  const ALERT_DISABLED = 1;
  static public $__names = array(
    0 => 'NORMAL',
    1 => 'ALERT_DISABLED',
  );
}

final class OpType {
  const END_OF_OPERATION = 0;
  const UPDATE_PROFILE = 1;
  const NOTIFIED_UPDATE_PROFILE = 2;
  const REGISTER_USERID = 3;
  const ADD_CONTACT = 4;
  const NOTIFIED_ADD_CONTACT = 5;
  const BLOCK_CONTACT = 6;
  const UNBLOCK_CONTACT = 7;
  const NOTIFIED_RECOMMEND_CONTACT = 8;
  const CREATE_GROUP = 9;
  const UPDATE_GROUP = 10;
  const NOTIFIED_UPDATE_GROUP = 11;
  const INVITE_INTO_GROUP = 12;
  const NOTIFIED_INVITE_INTO_GROUP = 13;
  const LEAVE_GROUP = 14;
  const NOTIFIED_LEAVE_GROUP = 15;
  const ACCEPT_GROUP_INVITATION = 16;
  const NOTIFIED_ACCEPT_GROUP_INVITATION = 17;
  const KICKOUT_FROM_GROUP = 18;
  const NOTIFIED_KICKOUT_FROM_GROUP = 19;
  const CREATE_ROOM = 20;
  const INVITE_INTO_ROOM = 21;
  const NOTIFIED_INVITE_INTO_ROOM = 22;
  const LEAVE_ROOM = 23;
  const NOTIFIED_LEAVE_ROOM = 24;
  const SEND_MESSAGE = 25;
  const RECEIVE_MESSAGE = 26;
  const SEND_MESSAGE_RECEIPT = 27;
  const RECEIVE_MESSAGE_RECEIPT = 28;
  const SEND_CONTENT_RECEIPT = 29;
  const RECEIVE_ANNOUNCEMENT = 30;
  const CANCEL_INVITATION_GROUP = 31;
  const NOTIFIED_CANCEL_INVITATION_GROUP = 32;
  const NOTIFIED_UNREGISTER_USER = 33;
  const REJECT_GROUP_INVITATION = 34;
  const NOTIFIED_REJECT_GROUP_INVITATION = 35;
  const UPDATE_SETTINGS = 36;
  const NOTIFIED_REGISTER_USER = 37;
  const INVITE_VIA_EMAIL = 38;
  const NOTIFIED_REQUEST_RECOVERY = 39;
  const SEND_CHAT_CHECKED = 40;
  const SEND_CHAT_REMOVED = 41;
  const NOTIFIED_FORCE_SYNC = 42;
  const SEND_CONTENT = 43;
  const SEND_MESSAGE_MYHOME = 44;
  const NOTIFIED_UPDATE_CONTENT_PREVIEW = 45;
  const REMOVE_ALL_MESSAGES = 46;
  const NOTIFIED_UPDATE_PURCHASES = 47;
  const DUMMY = 48;
  const UPDATE_CONTACT = 49;
  const NOTIFIED_RECEIVED_CALL = 50;
  const CANCEL_CALL = 51;
  const NOTIFIED_REDIRECT = 52;
  const NOTIFIED_CHANNEL_SYNC = 53;
  const FAILED_SEND_MESSAGE = 54;
  const NOTIFIED_READ_MESSAGE = 55;
  const FAILED_EMAIL_CONFIRMATION = 56;
  const NOTIFIED_CHAT_CONTENT = 58;
  const NOTIFIED_PUSH_NOTICENTER_ITEM = 59;
  static public $__names = array(
    0 => 'END_OF_OPERATION',
    1 => 'UPDATE_PROFILE',
    2 => 'NOTIFIED_UPDATE_PROFILE',
    3 => 'REGISTER_USERID',
    4 => 'ADD_CONTACT',
    5 => 'NOTIFIED_ADD_CONTACT',
    6 => 'BLOCK_CONTACT',
    7 => 'UNBLOCK_CONTACT',
    8 => 'NOTIFIED_RECOMMEND_CONTACT',
    9 => 'CREATE_GROUP',
    10 => 'UPDATE_GROUP',
    11 => 'NOTIFIED_UPDATE_GROUP',
    12 => 'INVITE_INTO_GROUP',
    13 => 'NOTIFIED_INVITE_INTO_GROUP',
    14 => 'LEAVE_GROUP',
    15 => 'NOTIFIED_LEAVE_GROUP',
    16 => 'ACCEPT_GROUP_INVITATION',
    17 => 'NOTIFIED_ACCEPT_GROUP_INVITATION',
    18 => 'KICKOUT_FROM_GROUP',
    19 => 'NOTIFIED_KICKOUT_FROM_GROUP',
    20 => 'CREATE_ROOM',
    21 => 'INVITE_INTO_ROOM',
    22 => 'NOTIFIED_INVITE_INTO_ROOM',
    23 => 'LEAVE_ROOM',
    24 => 'NOTIFIED_LEAVE_ROOM',
    25 => 'SEND_MESSAGE',
    26 => 'RECEIVE_MESSAGE',
    27 => 'SEND_MESSAGE_RECEIPT',
    28 => 'RECEIVE_MESSAGE_RECEIPT',
    29 => 'SEND_CONTENT_RECEIPT',
    30 => 'RECEIVE_ANNOUNCEMENT',
    31 => 'CANCEL_INVITATION_GROUP',
    32 => 'NOTIFIED_CANCEL_INVITATION_GROUP',
    33 => 'NOTIFIED_UNREGISTER_USER',
    34 => 'REJECT_GROUP_INVITATION',
    35 => 'NOTIFIED_REJECT_GROUP_INVITATION',
    36 => 'UPDATE_SETTINGS',
    37 => 'NOTIFIED_REGISTER_USER',
    38 => 'INVITE_VIA_EMAIL',
    39 => 'NOTIFIED_REQUEST_RECOVERY',
    40 => 'SEND_CHAT_CHECKED',
    41 => 'SEND_CHAT_REMOVED',
    42 => 'NOTIFIED_FORCE_SYNC',
    43 => 'SEND_CONTENT',
    44 => 'SEND_MESSAGE_MYHOME',
    45 => 'NOTIFIED_UPDATE_CONTENT_PREVIEW',
    46 => 'REMOVE_ALL_MESSAGES',
    47 => 'NOTIFIED_UPDATE_PURCHASES',
    48 => 'DUMMY',
    49 => 'UPDATE_CONTACT',
    50 => 'NOTIFIED_RECEIVED_CALL',
    51 => 'CANCEL_CALL',
    52 => 'NOTIFIED_REDIRECT',
    53 => 'NOTIFIED_CHANNEL_SYNC',
    54 => 'FAILED_SEND_MESSAGE',
    55 => 'NOTIFIED_READ_MESSAGE',
    56 => 'FAILED_EMAIL_CONFIRMATION',
    58 => 'NOTIFIED_CHAT_CONTENT',
    59 => 'NOTIFIED_PUSH_NOTICENTER_ITEM',
  );
}

final class PayloadType {
  const PAYLOAD_BUY = 101;
  const PAYLOAD_CS = 111;
  const PAYLOAD_BONUS = 121;
  const PAYLOAD_EVENT = 131;
  static public $__names = array(
    101 => 'PAYLOAD_BUY',
    111 => 'PAYLOAD_CS',
    121 => 'PAYLOAD_BONUS',
    131 => 'PAYLOAD_EVENT',
  );
}

final class PaymentPgType {
  const PAYMENT_PG_NONE = 0;
  const PAYMENT_PG_AU = 1;
  const PAYMENT_PG_AL = 2;
  static public $__names = array(
    0 => 'PAYMENT_PG_NONE',
    1 => 'PAYMENT_PG_AU',
    2 => 'PAYMENT_PG_AL',
  );
}

final class PaymentType {
  const PAYMENT_APPLE = 1;
  const PAYMENT_GOOGLE = 2;
  static public $__names = array(
    1 => 'PAYMENT_APPLE',
    2 => 'PAYMENT_GOOGLE',
  );
}

final class ProductBannerLinkType {
  const BANNER_LINK_NONE = 0;
  const BANNER_LINK_ITEM = 1;
  const BANNER_LINK_URL = 2;
  const BANNER_LINK_CATEGORY = 3;
  static public $__names = array(
    0 => 'BANNER_LINK_NONE',
    1 => 'BANNER_LINK_ITEM',
    2 => 'BANNER_LINK_URL',
    3 => 'BANNER_LINK_CATEGORY',
  );
}

final class ProductEventType {
  const NO_EVENT = 0;
  const CARRIER_ANY = 65537;
  const BUDDY_ANY = 131073;
  const INSTALL_IOS = 196609;
  const INSTALL_ANDROID = 196610;
  const MISSION_ANY = 262145;
  const MUSTBUY_ANY = 327681;
  static public $__names = array(
    0 => 'NO_EVENT',
    65537 => 'CARRIER_ANY',
    131073 => 'BUDDY_ANY',
    196609 => 'INSTALL_IOS',
    196610 => 'INSTALL_ANDROID',
    262145 => 'MISSION_ANY',
    327681 => 'MUSTBUY_ANY',
  );
}

final class ProfileAttribute {
  const EMAIL = 1;
  const DISPLAY_NAME = 2;
  const PHONETIC_NAME = 4;
  const PICTURE = 8;
  const STATUS_MESSAGE = 16;
  const ALLOW_SEARCH_BY_USERID = 32;
  const ALLOW_SEARCH_BY_EMAIL = 64;
  const BUDDY_STATUS = 128;
  const ALL = 255;
  static public $__names = array(
    1 => 'EMAIL',
    2 => 'DISPLAY_NAME',
    4 => 'PHONETIC_NAME',
    8 => 'PICTURE',
    16 => 'STATUS_MESSAGE',
    32 => 'ALLOW_SEARCH_BY_USERID',
    64 => 'ALLOW_SEARCH_BY_EMAIL',
    128 => 'BUDDY_STATUS',
    255 => 'ALL',
  );
}

final class SettingsAttribute {
  const NOTIFICATION_ENABLE = 1;
  const NOTIFICATION_MUTE_EXPIRATION = 2;
  const NOTIFICATION_NEW_MESSAGE = 4;
  const NOTIFICATION_GROUP_INVITATION = 8;
  const NOTIFICATION_SHOW_MESSAGE = 16;
  const NOTIFICATION_INCOMING_CALL = 32;
  const PRIVACY_SYNC_CONTACTS = 64;
  const PRIVACY_SEARCH_BY_PHONE_NUMBER = 128;
  const NOTIFICATION_SOUND_MESSAGE = 256;
  const NOTIFICATION_SOUND_GROUP = 512;
  const CONTACT_MY_TICKET = 1024;
  const IDENTITY_PROVIDER = 2048;
  const IDENTITY_IDENTIFIER = 4096;
  const PRIVACY_SEARCH_BY_USERID = 8192;
  const PRIVACY_SEARCH_BY_EMAIL = 16384;
  const PREFERENCE_LOCALE = 32768;
  const NOTIFICATION_DISABLED_WITH_SUB = 65536;
  const SNS_ACCOUNT = 524288;
  const PHONE_REGISTRATION = 1048576;
  const PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 2097152;
  const CUSTOM_MODE = 4194304;
  const PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 8388608;
  const EMAIL_CONFIRMATION_STATUS = 16777216;
  const PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 33554432;
  const ALL = 2147483647;
  static public $__names = array(
    1 => 'NOTIFICATION_ENABLE',
    2 => 'NOTIFICATION_MUTE_EXPIRATION',
    4 => 'NOTIFICATION_NEW_MESSAGE',
    8 => 'NOTIFICATION_GROUP_INVITATION',
    16 => 'NOTIFICATION_SHOW_MESSAGE',
    32 => 'NOTIFICATION_INCOMING_CALL',
    64 => 'PRIVACY_SYNC_CONTACTS',
    128 => 'PRIVACY_SEARCH_BY_PHONE_NUMBER',
    256 => 'NOTIFICATION_SOUND_MESSAGE',
    512 => 'NOTIFICATION_SOUND_GROUP',
    1024 => 'CONTACT_MY_TICKET',
    2048 => 'IDENTITY_PROVIDER',
    4096 => 'IDENTITY_IDENTIFIER',
    8192 => 'PRIVACY_SEARCH_BY_USERID',
    16384 => 'PRIVACY_SEARCH_BY_EMAIL',
    32768 => 'PREFERENCE_LOCALE',
    65536 => 'NOTIFICATION_DISABLED_WITH_SUB',
    524288 => 'SNS_ACCOUNT',
    1048576 => 'PHONE_REGISTRATION',
    2097152 => 'PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN',
    4194304 => 'CUSTOM_MODE',
    8388608 => 'PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME',
    16777216 => 'EMAIL_CONFIRMATION_STATUS',
    33554432 => 'PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND',
    2147483647 => 'ALL',
  );
}

final class SnsIdType {
  const FACEBOOK = 1;
  const SINA = 2;
  const RENREN = 3;
  const FEIXIN = 4;
  static public $__names = array(
    1 => 'FACEBOOK',
    2 => 'SINA',
    3 => 'RENREN',
    4 => 'FEIXIN',
  );
}

final class SpammerReason {
  const OTHER = 0;
  const ADVERTISING = 1;
  const GENDER_HARASSMENT = 2;
  const HARASSMENT = 3;
  static public $__names = array(
    0 => 'OTHER',
    1 => 'ADVERTISING',
    2 => 'GENDER_HARASSMENT',
    3 => 'HARASSMENT',
  );
}

final class SyncActionType {
  const SYNC = 0;
  const REPORT = 1;
  static public $__names = array(
    0 => 'SYNC',
    1 => 'REPORT',
  );
}

final class SyncCategory {
  const PROFILE = 0;
  const SETTINGS = 1;
  const OPS = 2;
  const CONTACT = 3;
  const RECOMMEND = 4;
  const BLOCK = 5;
  const GROUP = 6;
  const ROOM = 7;
  const NOTIFICATION = 8;
  static public $__names = array(
    0 => 'PROFILE',
    1 => 'SETTINGS',
    2 => 'OPS',
    3 => 'CONTACT',
    4 => 'RECOMMEND',
    5 => 'BLOCK',
    6 => 'GROUP',
    7 => 'ROOM',
    8 => 'NOTIFICATION',
  );
}

final class VerificationMethod {
  const NO_AVAILABLE = 0;
  const PIN_VIA_SMS = 1;
  const CALLERID_INDIGO = 2;
  const PIN_VIA_TTS = 4;
  const SKIP = 10;
  static public $__names = array(
    0 => 'NO_AVAILABLE',
    1 => 'PIN_VIA_SMS',
    2 => 'CALLERID_INDIGO',
    4 => 'PIN_VIA_TTS',
    10 => 'SKIP',
  );
}

final class VerificationResult {
  const FAILED = 0;
  const OK_NOT_REGISTERED_YET = 1;
  const OK_REGISTERED_WITH_SAME_DEVICE = 2;
  const OK_REGISTERED_WITH_ANOTHER_DEVICE = 3;
  static public $__names = array(
    0 => 'FAILED',
    1 => 'OK_NOT_REGISTERED_YET',
    2 => 'OK_REGISTERED_WITH_SAME_DEVICE',
    3 => 'OK_REGISTERED_WITH_ANOTHER_DEVICE',
  );
}

final class WapInvitationType {
  const REGISTRATION = 1;
  const CHAT = 2;
  static public $__names = array(
    1 => 'REGISTRATION',
    2 => 'CHAT',
  );
}

class Announcement {
  static $_TSPEC;

  public $index = null;
  public $forceUpdate = null;
  public $title = null;
  public $text = null;
  public $createdTime = null;
  public $pictureUrl = null;
  public $thumbnailUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'index',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'forceUpdate',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'text',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        14 => array(
          'var' => 'pictureUrl',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'thumbnailUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['index'])) {
        $this->index = $vals['index'];
      }
      if (isset($vals['forceUpdate'])) {
        $this->forceUpdate = $vals['forceUpdate'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['pictureUrl'])) {
        $this->pictureUrl = $vals['pictureUrl'];
      }
      if (isset($vals['thumbnailUrl'])) {
        $this->thumbnailUrl = $vals['thumbnailUrl'];
      }
    }
  }

  public function getName() {
    return 'Announcement';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->index);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->forceUpdate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pictureUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->thumbnailUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Announcement');
    if ($this->index !== null) {
      $xfer += $output->writeFieldBegin('index', TType::I32, 1);
      $xfer += $output->writeI32($this->index);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forceUpdate !== null) {
      $xfer += $output->writeFieldBegin('forceUpdate', TType::BOOL, 10);
      $xfer += $output->writeBool($this->forceUpdate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 11);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 12);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 13);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pictureUrl !== null) {
      $xfer += $output->writeFieldBegin('pictureUrl', TType::STRING, 14);
      $xfer += $output->writeString($this->pictureUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thumbnailUrl !== null) {
      $xfer += $output->writeFieldBegin('thumbnailUrl', TType::STRING, 15);
      $xfer += $output->writeString($this->thumbnailUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AuthQrcode {
  static $_TSPEC;

  public $qrcode = null;
  public $verifier = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'qrcode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'verifier',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['qrcode'])) {
        $this->qrcode = $vals['qrcode'];
      }
      if (isset($vals['verifier'])) {
        $this->verifier = $vals['verifier'];
      }
    }
  }

  public function getName() {
    return 'AuthQrcode';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->qrcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->verifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AuthQrcode');
    if ($this->qrcode !== null) {
      $xfer += $output->writeFieldBegin('qrcode', TType::STRING, 1);
      $xfer += $output->writeString($this->qrcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verifier !== null) {
      $xfer += $output->writeFieldBegin('verifier', TType::STRING, 2);
      $xfer += $output->writeString($this->verifier);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Contact {
  static $_TSPEC;

  public $mid = null;
  public $createdTime = null;
  public $type = null;
  public $status = null;
  public $relation = null;
  public $displayName = null;
  public $phoneticName = null;
  public $pictureStatus = null;
  public $thumbnailUrl = null;
  public $statusMessage = null;
  public $displayNameOverridden = null;
  public $favoriteTime = null;
  public $capableVoiceCall = null;
  public $capableVideoCall = null;
  public $capableMyhome = null;
  public $capableBuddy = null;
  public $attributes = null;
  public $settings = null;
  public $picturePath = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'relation',
          'type' => TType::I32,
          ),
        22 => array(
          'var' => 'displayName',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'phoneticName',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'pictureStatus',
          'type' => TType::STRING,
          ),
        25 => array(
          'var' => 'thumbnailUrl',
          'type' => TType::STRING,
          ),
        26 => array(
          'var' => 'statusMessage',
          'type' => TType::STRING,
          ),
        27 => array(
          'var' => 'displayNameOverridden',
          'type' => TType::STRING,
          ),
        28 => array(
          'var' => 'favoriteTime',
          'type' => TType::I64,
          ),
        31 => array(
          'var' => 'capableVoiceCall',
          'type' => TType::BOOL,
          ),
        32 => array(
          'var' => 'capableVideoCall',
          'type' => TType::BOOL,
          ),
        33 => array(
          'var' => 'capableMyhome',
          'type' => TType::BOOL,
          ),
        34 => array(
          'var' => 'capableBuddy',
          'type' => TType::BOOL,
          ),
        35 => array(
          'var' => 'attributes',
          'type' => TType::I32,
          ),
        36 => array(
          'var' => 'settings',
          'type' => TType::I64,
          ),
        37 => array(
          'var' => 'picturePath',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['relation'])) {
        $this->relation = $vals['relation'];
      }
      if (isset($vals['displayName'])) {
        $this->displayName = $vals['displayName'];
      }
      if (isset($vals['phoneticName'])) {
        $this->phoneticName = $vals['phoneticName'];
      }
      if (isset($vals['pictureStatus'])) {
        $this->pictureStatus = $vals['pictureStatus'];
      }
      if (isset($vals['thumbnailUrl'])) {
        $this->thumbnailUrl = $vals['thumbnailUrl'];
      }
      if (isset($vals['statusMessage'])) {
        $this->statusMessage = $vals['statusMessage'];
      }
      if (isset($vals['displayNameOverridden'])) {
        $this->displayNameOverridden = $vals['displayNameOverridden'];
      }
      if (isset($vals['favoriteTime'])) {
        $this->favoriteTime = $vals['favoriteTime'];
      }
      if (isset($vals['capableVoiceCall'])) {
        $this->capableVoiceCall = $vals['capableVoiceCall'];
      }
      if (isset($vals['capableVideoCall'])) {
        $this->capableVideoCall = $vals['capableVideoCall'];
      }
      if (isset($vals['capableMyhome'])) {
        $this->capableMyhome = $vals['capableMyhome'];
      }
      if (isset($vals['capableBuddy'])) {
        $this->capableBuddy = $vals['capableBuddy'];
      }
      if (isset($vals['attributes'])) {
        $this->attributes = $vals['attributes'];
      }
      if (isset($vals['settings'])) {
        $this->settings = $vals['settings'];
      }
      if (isset($vals['picturePath'])) {
        $this->picturePath = $vals['picturePath'];
      }
    }
  }

  public function getName() {
    return 'Contact';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->relation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phoneticName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pictureStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->thumbnailUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statusMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayNameOverridden);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->favoriteTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->capableVoiceCall);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->capableVideoCall);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->capableMyhome);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 34:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->capableBuddy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 35:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->attributes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 36:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->settings);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 37:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->picturePath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Contact');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 10);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 11);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relation !== null) {
      $xfer += $output->writeFieldBegin('relation', TType::I32, 21);
      $xfer += $output->writeI32($this->relation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayName !== null) {
      $xfer += $output->writeFieldBegin('displayName', TType::STRING, 22);
      $xfer += $output->writeString($this->displayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phoneticName !== null) {
      $xfer += $output->writeFieldBegin('phoneticName', TType::STRING, 23);
      $xfer += $output->writeString($this->phoneticName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pictureStatus !== null) {
      $xfer += $output->writeFieldBegin('pictureStatus', TType::STRING, 24);
      $xfer += $output->writeString($this->pictureStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thumbnailUrl !== null) {
      $xfer += $output->writeFieldBegin('thumbnailUrl', TType::STRING, 25);
      $xfer += $output->writeString($this->thumbnailUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusMessage !== null) {
      $xfer += $output->writeFieldBegin('statusMessage', TType::STRING, 26);
      $xfer += $output->writeString($this->statusMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayNameOverridden !== null) {
      $xfer += $output->writeFieldBegin('displayNameOverridden', TType::STRING, 27);
      $xfer += $output->writeString($this->displayNameOverridden);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->favoriteTime !== null) {
      $xfer += $output->writeFieldBegin('favoriteTime', TType::I64, 28);
      $xfer += $output->writeI64($this->favoriteTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->capableVoiceCall !== null) {
      $xfer += $output->writeFieldBegin('capableVoiceCall', TType::BOOL, 31);
      $xfer += $output->writeBool($this->capableVoiceCall);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->capableVideoCall !== null) {
      $xfer += $output->writeFieldBegin('capableVideoCall', TType::BOOL, 32);
      $xfer += $output->writeBool($this->capableVideoCall);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->capableMyhome !== null) {
      $xfer += $output->writeFieldBegin('capableMyhome', TType::BOOL, 33);
      $xfer += $output->writeBool($this->capableMyhome);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->capableBuddy !== null) {
      $xfer += $output->writeFieldBegin('capableBuddy', TType::BOOL, 34);
      $xfer += $output->writeBool($this->capableBuddy);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->attributes !== null) {
      $xfer += $output->writeFieldBegin('attributes', TType::I32, 35);
      $xfer += $output->writeI32($this->attributes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->settings !== null) {
      $xfer += $output->writeFieldBegin('settings', TType::I64, 36);
      $xfer += $output->writeI64($this->settings);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->picturePath !== null) {
      $xfer += $output->writeFieldBegin('picturePath', TType::STRING, 37);
      $xfer += $output->writeString($this->picturePath);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Location {
  static $_TSPEC;

  public $title = null;
  public $address = null;
  public $latitude = null;
  public $longitude = null;
  public $phone = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'latitude',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'longitude',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
      if (isset($vals['latitude'])) {
        $this->latitude = $vals['latitude'];
      }
      if (isset($vals['longitude'])) {
        $this->longitude = $vals['longitude'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
    }
  }

  public function getName() {
    return 'Location';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->latitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->longitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Location');
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 1);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address !== null) {
      $xfer += $output->writeFieldBegin('address', TType::STRING, 2);
      $xfer += $output->writeString($this->address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->latitude !== null) {
      $xfer += $output->writeFieldBegin('latitude', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->latitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->longitude !== null) {
      $xfer += $output->writeFieldBegin('longitude', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->longitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 5);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Coin {
  static $_TSPEC;

  public $freeCoinBalance = null;
  public $payedCoinBalance = null;
  public $totalCoinBalance = null;
  public $rewardCoinBalance = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'freeCoinBalance',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'payedCoinBalance',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'totalCoinBalance',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'rewardCoinBalance',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['freeCoinBalance'])) {
        $this->freeCoinBalance = $vals['freeCoinBalance'];
      }
      if (isset($vals['payedCoinBalance'])) {
        $this->payedCoinBalance = $vals['payedCoinBalance'];
      }
      if (isset($vals['totalCoinBalance'])) {
        $this->totalCoinBalance = $vals['totalCoinBalance'];
      }
      if (isset($vals['rewardCoinBalance'])) {
        $this->rewardCoinBalance = $vals['rewardCoinBalance'];
      }
    }
  }

  public function getName() {
    return 'Coin';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->freeCoinBalance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->payedCoinBalance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalCoinBalance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rewardCoinBalance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Coin');
    if ($this->freeCoinBalance !== null) {
      $xfer += $output->writeFieldBegin('freeCoinBalance', TType::I32, 1);
      $xfer += $output->writeI32($this->freeCoinBalance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payedCoinBalance !== null) {
      $xfer += $output->writeFieldBegin('payedCoinBalance', TType::I32, 2);
      $xfer += $output->writeI32($this->payedCoinBalance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalCoinBalance !== null) {
      $xfer += $output->writeFieldBegin('totalCoinBalance', TType::I32, 3);
      $xfer += $output->writeI32($this->totalCoinBalance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rewardCoinBalance !== null) {
      $xfer += $output->writeFieldBegin('rewardCoinBalance', TType::I32, 4);
      $xfer += $output->writeI32($this->rewardCoinBalance);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CoinPayLoad {
  static $_TSPEC;

  public $payCoin = null;
  public $freeCoin = null;
  public $type = null;
  public $rewardCoin = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'payCoin',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'freeCoin',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'rewardCoin',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['payCoin'])) {
        $this->payCoin = $vals['payCoin'];
      }
      if (isset($vals['freeCoin'])) {
        $this->freeCoin = $vals['freeCoin'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['rewardCoin'])) {
        $this->rewardCoin = $vals['rewardCoin'];
      }
    }
  }

  public function getName() {
    return 'CoinPayLoad';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->payCoin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->freeCoin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rewardCoin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CoinPayLoad');
    if ($this->payCoin !== null) {
      $xfer += $output->writeFieldBegin('payCoin', TType::I32, 1);
      $xfer += $output->writeI32($this->payCoin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->freeCoin !== null) {
      $xfer += $output->writeFieldBegin('freeCoin', TType::I32, 2);
      $xfer += $output->writeI32($this->freeCoin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 3);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rewardCoin !== null) {
      $xfer += $output->writeFieldBegin('rewardCoin', TType::I32, 4);
      $xfer += $output->writeI32($this->rewardCoin);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CoinHistory {
  static $_TSPEC;

  public $payDate = null;
  public $coinBalance = null;
  public $coin = null;
  public $price = null;
  public $title = null;
  public $refund = null;
  public $paySeq = null;
  public $currency = null;
  public $currencySign = null;
  public $displayPrice = null;
  public $payload = null;
  public $channelId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'payDate',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'coinBalance',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'coin',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'price',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'refund',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'paySeq',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'currency',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'currencySign',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'displayPrice',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'payload',
          'type' => TType::STRUCT,
          'class' => '\CoinPayLoad',
          ),
        12 => array(
          'var' => 'channelId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['payDate'])) {
        $this->payDate = $vals['payDate'];
      }
      if (isset($vals['coinBalance'])) {
        $this->coinBalance = $vals['coinBalance'];
      }
      if (isset($vals['coin'])) {
        $this->coin = $vals['coin'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['refund'])) {
        $this->refund = $vals['refund'];
      }
      if (isset($vals['paySeq'])) {
        $this->paySeq = $vals['paySeq'];
      }
      if (isset($vals['currency'])) {
        $this->currency = $vals['currency'];
      }
      if (isset($vals['currencySign'])) {
        $this->currencySign = $vals['currencySign'];
      }
      if (isset($vals['displayPrice'])) {
        $this->displayPrice = $vals['displayPrice'];
      }
      if (isset($vals['payload'])) {
        $this->payload = $vals['payload'];
      }
      if (isset($vals['channelId'])) {
        $this->channelId = $vals['channelId'];
      }
    }
  }

  public function getName() {
    return 'CoinHistory';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->payDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->coinBalance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->coin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->refund);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->paySeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currency);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currencySign);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->payload = new \CoinPayLoad();
            $xfer += $this->payload->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channelId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CoinHistory');
    if ($this->payDate !== null) {
      $xfer += $output->writeFieldBegin('payDate', TType::I64, 1);
      $xfer += $output->writeI64($this->payDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->coinBalance !== null) {
      $xfer += $output->writeFieldBegin('coinBalance', TType::I32, 2);
      $xfer += $output->writeI32($this->coinBalance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->coin !== null) {
      $xfer += $output->writeFieldBegin('coin', TType::I32, 3);
      $xfer += $output->writeI32($this->coin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::STRING, 4);
      $xfer += $output->writeString($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 5);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refund !== null) {
      $xfer += $output->writeFieldBegin('refund', TType::BOOL, 6);
      $xfer += $output->writeBool($this->refund);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->paySeq !== null) {
      $xfer += $output->writeFieldBegin('paySeq', TType::STRING, 7);
      $xfer += $output->writeString($this->paySeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currency !== null) {
      $xfer += $output->writeFieldBegin('currency', TType::STRING, 8);
      $xfer += $output->writeString($this->currency);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currencySign !== null) {
      $xfer += $output->writeFieldBegin('currencySign', TType::STRING, 9);
      $xfer += $output->writeString($this->currencySign);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayPrice !== null) {
      $xfer += $output->writeFieldBegin('displayPrice', TType::STRING, 10);
      $xfer += $output->writeString($this->displayPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payload !== null) {
      if (!is_object($this->payload)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('payload', TType::STRUCT, 11);
      $xfer += $this->payload->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channelId !== null) {
      $xfer += $output->writeFieldBegin('channelId', TType::STRING, 12);
      $xfer += $output->writeString($this->channelId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CoinHistoryCondition {
  static $_TSPEC;

  public $start = null;
  public $size = null;
  public $language = null;
  public $eddt = null;
  public $appStoreCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'size',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'language',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'eddt',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'appStoreCode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
      if (isset($vals['eddt'])) {
        $this->eddt = $vals['eddt'];
      }
      if (isset($vals['appStoreCode'])) {
        $this->appStoreCode = $vals['appStoreCode'];
      }
    }
  }

  public function getName() {
    return 'CoinHistoryCondition';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->eddt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appStoreCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CoinHistoryCondition');
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 1);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I32, 2);
      $xfer += $output->writeI32($this->size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->language !== null) {
      $xfer += $output->writeFieldBegin('language', TType::STRING, 3);
      $xfer += $output->writeString($this->language);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eddt !== null) {
      $xfer += $output->writeFieldBegin('eddt', TType::STRING, 4);
      $xfer += $output->writeString($this->eddt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appStoreCode !== null) {
      $xfer += $output->writeFieldBegin('appStoreCode', TType::I32, 5);
      $xfer += $output->writeI32($this->appStoreCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CoinHistoryResult {
  static $_TSPEC;

  public $historys = null;
  public $balance = null;
  public $hasNext = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'historys',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\CoinHistory',
            ),
          ),
        2 => array(
          'var' => 'balance',
          'type' => TType::STRUCT,
          'class' => '\Coin',
          ),
        3 => array(
          'var' => 'hasNext',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['historys'])) {
        $this->historys = $vals['historys'];
      }
      if (isset($vals['balance'])) {
        $this->balance = $vals['balance'];
      }
      if (isset($vals['hasNext'])) {
        $this->hasNext = $vals['hasNext'];
      }
    }
  }

  public function getName() {
    return 'CoinHistoryResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->historys = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \CoinHistory();
              $xfer += $elem5->read($input);
              $this->historys []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->balance = new \Coin();
            $xfer += $this->balance->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasNext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CoinHistoryResult');
    if ($this->historys !== null) {
      if (!is_array($this->historys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('historys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->historys));
        {
          foreach ($this->historys as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->balance !== null) {
      if (!is_object($this->balance)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('balance', TType::STRUCT, 2);
      $xfer += $this->balance->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hasNext !== null) {
      $xfer += $output->writeFieldBegin('hasNext', TType::BOOL, 3);
      $xfer += $output->writeBool($this->hasNext);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CoinProductItem {
  static $_TSPEC;

  public $itemId = null;
  public $coin = null;
  public $freeCoin = null;
  public $currency = null;
  public $price = null;
  public $displayPrice = null;
  public $name = null;
  public $desc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'coin',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'freeCoin',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'currency',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'price',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'displayPrice',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['itemId'])) {
        $this->itemId = $vals['itemId'];
      }
      if (isset($vals['coin'])) {
        $this->coin = $vals['coin'];
      }
      if (isset($vals['freeCoin'])) {
        $this->freeCoin = $vals['freeCoin'];
      }
      if (isset($vals['currency'])) {
        $this->currency = $vals['currency'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['displayPrice'])) {
        $this->displayPrice = $vals['displayPrice'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
    }
  }

  public function getName() {
    return 'CoinProductItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->coin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->freeCoin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currency);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CoinProductItem');
    if ($this->itemId !== null) {
      $xfer += $output->writeFieldBegin('itemId', TType::STRING, 1);
      $xfer += $output->writeString($this->itemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->coin !== null) {
      $xfer += $output->writeFieldBegin('coin', TType::I32, 2);
      $xfer += $output->writeI32($this->coin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->freeCoin !== null) {
      $xfer += $output->writeFieldBegin('freeCoin', TType::I32, 3);
      $xfer += $output->writeI32($this->freeCoin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currency !== null) {
      $xfer += $output->writeFieldBegin('currency', TType::STRING, 5);
      $xfer += $output->writeString($this->currency);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::STRING, 6);
      $xfer += $output->writeString($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayPrice !== null) {
      $xfer += $output->writeFieldBegin('displayPrice', TType::STRING, 7);
      $xfer += $output->writeString($this->displayPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 8);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 9);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CoinPurchaseReservation {
  static $_TSPEC;

  public $productId = null;
  public $country = null;
  public $currency = null;
  public $price = null;
  public $appStoreCode = null;
  public $language = null;
  public $pgCode = null;
  public $redirectUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'productId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'country',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'currency',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'price',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'appStoreCode',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'language',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'pgCode',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'redirectUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['productId'])) {
        $this->productId = $vals['productId'];
      }
      if (isset($vals['country'])) {
        $this->country = $vals['country'];
      }
      if (isset($vals['currency'])) {
        $this->currency = $vals['currency'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['appStoreCode'])) {
        $this->appStoreCode = $vals['appStoreCode'];
      }
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
      if (isset($vals['pgCode'])) {
        $this->pgCode = $vals['pgCode'];
      }
      if (isset($vals['redirectUrl'])) {
        $this->redirectUrl = $vals['redirectUrl'];
      }
    }
  }

  public function getName() {
    return 'CoinPurchaseReservation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->productId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->country);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currency);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appStoreCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pgCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->redirectUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CoinPurchaseReservation');
    if ($this->productId !== null) {
      $xfer += $output->writeFieldBegin('productId', TType::STRING, 1);
      $xfer += $output->writeString($this->productId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->country !== null) {
      $xfer += $output->writeFieldBegin('country', TType::STRING, 2);
      $xfer += $output->writeString($this->country);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currency !== null) {
      $xfer += $output->writeFieldBegin('currency', TType::STRING, 3);
      $xfer += $output->writeString($this->currency);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::STRING, 4);
      $xfer += $output->writeString($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appStoreCode !== null) {
      $xfer += $output->writeFieldBegin('appStoreCode', TType::I32, 5);
      $xfer += $output->writeI32($this->appStoreCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->language !== null) {
      $xfer += $output->writeFieldBegin('language', TType::STRING, 6);
      $xfer += $output->writeString($this->language);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pgCode !== null) {
      $xfer += $output->writeFieldBegin('pgCode', TType::I32, 7);
      $xfer += $output->writeI32($this->pgCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->redirectUrl !== null) {
      $xfer += $output->writeFieldBegin('redirectUrl', TType::STRING, 8);
      $xfer += $output->writeString($this->redirectUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CompactContact {
  static $_TSPEC;

  public $mid = null;
  public $createdTime = null;
  public $modifiedTime = null;
  public $status = null;
  public $settings = null;
  public $displayNameOverridden = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'modifiedTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'settings',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'displayNameOverridden',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['modifiedTime'])) {
        $this->modifiedTime = $vals['modifiedTime'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['settings'])) {
        $this->settings = $vals['settings'];
      }
      if (isset($vals['displayNameOverridden'])) {
        $this->displayNameOverridden = $vals['displayNameOverridden'];
      }
    }
  }

  public function getName() {
    return 'CompactContact';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->modifiedTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->settings);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayNameOverridden);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CompactContact');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->modifiedTime !== null) {
      $xfer += $output->writeFieldBegin('modifiedTime', TType::I64, 3);
      $xfer += $output->writeI64($this->modifiedTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 4);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->settings !== null) {
      $xfer += $output->writeFieldBegin('settings', TType::I64, 5);
      $xfer += $output->writeI64($this->settings);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayNameOverridden !== null) {
      $xfer += $output->writeFieldBegin('displayNameOverridden', TType::STRING, 6);
      $xfer += $output->writeString($this->displayNameOverridden);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContactModification {
  static $_TSPEC;

  public $type = null;
  public $luid = null;
  public $phones = null;
  public $emails = null;
  public $userids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'luid',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'phones',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        12 => array(
          'var' => 'emails',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        13 => array(
          'var' => 'userids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['luid'])) {
        $this->luid = $vals['luid'];
      }
      if (isset($vals['phones'])) {
        $this->phones = $vals['phones'];
      }
      if (isset($vals['emails'])) {
        $this->emails = $vals['emails'];
      }
      if (isset($vals['userids'])) {
        $this->userids = $vals['userids'];
      }
    }
  }

  public function getName() {
    return 'ContactModification';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->luid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->phones = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readString($elem12);
              $this->phones []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::LST) {
            $this->emails = array();
            $_size13 = 0;
            $_etype16 = 0;
            $xfer += $input->readListBegin($_etype16, $_size13);
            for ($_i17 = 0; $_i17 < $_size13; ++$_i17)
            {
              $elem18 = null;
              $xfer += $input->readString($elem18);
              $this->emails []= $elem18;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::LST) {
            $this->userids = array();
            $_size19 = 0;
            $_etype22 = 0;
            $xfer += $input->readListBegin($_etype22, $_size19);
            for ($_i23 = 0; $_i23 < $_size19; ++$_i23)
            {
              $elem24 = null;
              $xfer += $input->readString($elem24);
              $this->userids []= $elem24;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContactModification');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->luid !== null) {
      $xfer += $output->writeFieldBegin('luid', TType::STRING, 2);
      $xfer += $output->writeString($this->luid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phones !== null) {
      if (!is_array($this->phones)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('phones', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRING, count($this->phones));
        {
          foreach ($this->phones as $iter25)
          {
            $xfer += $output->writeString($iter25);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->emails !== null) {
      if (!is_array($this->emails)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('emails', TType::LST, 12);
      {
        $output->writeListBegin(TType::STRING, count($this->emails));
        {
          foreach ($this->emails as $iter26)
          {
            $xfer += $output->writeString($iter26);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userids !== null) {
      if (!is_array($this->userids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('userids', TType::LST, 13);
      {
        $output->writeListBegin(TType::STRING, count($this->userids));
        {
          foreach ($this->userids as $iter27)
          {
            $xfer += $output->writeString($iter27);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContactRegistration {
  static $_TSPEC;

  public $contact = null;
  public $luid = null;
  public $contactType = null;
  public $contactKey = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'contact',
          'type' => TType::STRUCT,
          'class' => '\Contact',
          ),
        10 => array(
          'var' => 'luid',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'contactType',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'contactKey',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['contact'])) {
        $this->contact = $vals['contact'];
      }
      if (isset($vals['luid'])) {
        $this->luid = $vals['luid'];
      }
      if (isset($vals['contactType'])) {
        $this->contactType = $vals['contactType'];
      }
      if (isset($vals['contactKey'])) {
        $this->contactKey = $vals['contactKey'];
      }
    }
  }

  public function getName() {
    return 'ContactRegistration';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->contact = new \Contact();
            $xfer += $this->contact->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->luid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->contactType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contactKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContactRegistration');
    if ($this->contact !== null) {
      if (!is_object($this->contact)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contact', TType::STRUCT, 1);
      $xfer += $this->contact->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->luid !== null) {
      $xfer += $output->writeFieldBegin('luid', TType::STRING, 10);
      $xfer += $output->writeString($this->luid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contactType !== null) {
      $xfer += $output->writeFieldBegin('contactType', TType::I32, 11);
      $xfer += $output->writeI32($this->contactType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contactKey !== null) {
      $xfer += $output->writeFieldBegin('contactKey', TType::STRING, 12);
      $xfer += $output->writeString($this->contactKey);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContactReport {
  static $_TSPEC;

  public $mid = null;
  public $exists = null;
  public $contact = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'exists',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'contact',
          'type' => TType::STRUCT,
          'class' => '\Contact',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['exists'])) {
        $this->exists = $vals['exists'];
      }
      if (isset($vals['contact'])) {
        $this->contact = $vals['contact'];
      }
    }
  }

  public function getName() {
    return 'ContactReport';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->exists);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->contact = new \Contact();
            $xfer += $this->contact->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContactReport');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exists !== null) {
      $xfer += $output->writeFieldBegin('exists', TType::BOOL, 2);
      $xfer += $output->writeBool($this->exists);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contact !== null) {
      if (!is_object($this->contact)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contact', TType::STRUCT, 3);
      $xfer += $this->contact->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ContactReportResult {
  static $_TSPEC;

  public $mid = null;
  public $exists = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'exists',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['exists'])) {
        $this->exists = $vals['exists'];
      }
    }
  }

  public function getName() {
    return 'ContactReportResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->exists);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContactReportResult');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exists !== null) {
      $xfer += $output->writeFieldBegin('exists', TType::BOOL, 2);
      $xfer += $output->writeBool($this->exists);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeviceInfo {
  static $_TSPEC;

  public $deviceName = null;
  public $systemName = null;
  public $systemVersion = null;
  public $model = null;
  public $carrierCode = null;
  public $carrierName = null;
  public $applicationType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'deviceName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'systemName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'systemVersion',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'model',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'carrierCode',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'carrierName',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'applicationType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['deviceName'])) {
        $this->deviceName = $vals['deviceName'];
      }
      if (isset($vals['systemName'])) {
        $this->systemName = $vals['systemName'];
      }
      if (isset($vals['systemVersion'])) {
        $this->systemVersion = $vals['systemVersion'];
      }
      if (isset($vals['model'])) {
        $this->model = $vals['model'];
      }
      if (isset($vals['carrierCode'])) {
        $this->carrierCode = $vals['carrierCode'];
      }
      if (isset($vals['carrierName'])) {
        $this->carrierName = $vals['carrierName'];
      }
      if (isset($vals['applicationType'])) {
        $this->applicationType = $vals['applicationType'];
      }
    }
  }

  public function getName() {
    return 'DeviceInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->deviceName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->systemName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->systemVersion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->model);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->carrierCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->carrierName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->applicationType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeviceInfo');
    if ($this->deviceName !== null) {
      $xfer += $output->writeFieldBegin('deviceName', TType::STRING, 1);
      $xfer += $output->writeString($this->deviceName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->systemName !== null) {
      $xfer += $output->writeFieldBegin('systemName', TType::STRING, 2);
      $xfer += $output->writeString($this->systemName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->systemVersion !== null) {
      $xfer += $output->writeFieldBegin('systemVersion', TType::STRING, 3);
      $xfer += $output->writeString($this->systemVersion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->model !== null) {
      $xfer += $output->writeFieldBegin('model', TType::STRING, 4);
      $xfer += $output->writeString($this->model);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->carrierCode !== null) {
      $xfer += $output->writeFieldBegin('carrierCode', TType::I32, 10);
      $xfer += $output->writeI32($this->carrierCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->carrierName !== null) {
      $xfer += $output->writeFieldBegin('carrierName', TType::STRING, 11);
      $xfer += $output->writeString($this->carrierName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationType !== null) {
      $xfer += $output->writeFieldBegin('applicationType', TType::I32, 20);
      $xfer += $output->writeI32($this->applicationType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EmailConfirmation {
  static $_TSPEC;

  public $usePasswordSet = null;
  public $email = null;
  public $password = null;
  public $ignoreDuplication = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'usePasswordSet',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ignoreDuplication',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['usePasswordSet'])) {
        $this->usePasswordSet = $vals['usePasswordSet'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['ignoreDuplication'])) {
        $this->ignoreDuplication = $vals['ignoreDuplication'];
      }
    }
  }

  public function getName() {
    return 'EmailConfirmation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->usePasswordSet);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->ignoreDuplication);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EmailConfirmation');
    if ($this->usePasswordSet !== null) {
      $xfer += $output->writeFieldBegin('usePasswordSet', TType::BOOL, 1);
      $xfer += $output->writeBool($this->usePasswordSet);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 2);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 3);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ignoreDuplication !== null) {
      $xfer += $output->writeFieldBegin('ignoreDuplication', TType::BOOL, 4);
      $xfer += $output->writeBool($this->ignoreDuplication);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EmailConfirmationSession {
  static $_TSPEC;

  public $emailConfirmationType = null;
  public $verifier = null;
  public $targetEmail = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'emailConfirmationType',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'verifier',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'targetEmail',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['emailConfirmationType'])) {
        $this->emailConfirmationType = $vals['emailConfirmationType'];
      }
      if (isset($vals['verifier'])) {
        $this->verifier = $vals['verifier'];
      }
      if (isset($vals['targetEmail'])) {
        $this->targetEmail = $vals['targetEmail'];
      }
    }
  }

  public function getName() {
    return 'EmailConfirmationSession';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->emailConfirmationType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->verifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->targetEmail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EmailConfirmationSession');
    if ($this->emailConfirmationType !== null) {
      $xfer += $output->writeFieldBegin('emailConfirmationType', TType::I32, 1);
      $xfer += $output->writeI32($this->emailConfirmationType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verifier !== null) {
      $xfer += $output->writeFieldBegin('verifier', TType::STRING, 2);
      $xfer += $output->writeString($this->verifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->targetEmail !== null) {
      $xfer += $output->writeFieldBegin('targetEmail', TType::STRING, 3);
      $xfer += $output->writeString($this->targetEmail);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Geolocation {
  static $_TSPEC;

  public $longitude = null;
  public $latitude = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'longitude',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'latitude',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['longitude'])) {
        $this->longitude = $vals['longitude'];
      }
      if (isset($vals['latitude'])) {
        $this->latitude = $vals['latitude'];
      }
    }
  }

  public function getName() {
    return 'Geolocation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->longitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->latitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Geolocation');
    if ($this->longitude !== null) {
      $xfer += $output->writeFieldBegin('longitude', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->longitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->latitude !== null) {
      $xfer += $output->writeFieldBegin('latitude', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->latitude);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Group {
  static $_TSPEC;

  public $id = null;
  public $createdTime = null;
  public $name = null;
  public $pictureStatus = null;
  public $members = null;
  public $creator = null;
  public $invitee = null;
  public $notificationDisabled = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'pictureStatus',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'members',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Contact',
            ),
          ),
        21 => array(
          'var' => 'creator',
          'type' => TType::STRUCT,
          'class' => '\Contact',
          ),
        22 => array(
          'var' => 'invitee',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Contact',
            ),
          ),
        31 => array(
          'var' => 'notificationDisabled',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['pictureStatus'])) {
        $this->pictureStatus = $vals['pictureStatus'];
      }
      if (isset($vals['members'])) {
        $this->members = $vals['members'];
      }
      if (isset($vals['creator'])) {
        $this->creator = $vals['creator'];
      }
      if (isset($vals['invitee'])) {
        $this->invitee = $vals['invitee'];
      }
      if (isset($vals['notificationDisabled'])) {
        $this->notificationDisabled = $vals['notificationDisabled'];
      }
    }
  }

  public function getName() {
    return 'Group';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pictureStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::LST) {
            $this->members = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new \Contact();
              $xfer += $elem33->read($input);
              $this->members []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRUCT) {
            $this->creator = new \Contact();
            $xfer += $this->creator->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::LST) {
            $this->invitee = array();
            $_size34 = 0;
            $_etype37 = 0;
            $xfer += $input->readListBegin($_etype37, $_size34);
            for ($_i38 = 0; $_i38 < $_size34; ++$_i38)
            {
              $elem39 = null;
              $elem39 = new \Contact();
              $xfer += $elem39->read($input);
              $this->invitee []= $elem39;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationDisabled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Group');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 10);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pictureStatus !== null) {
      $xfer += $output->writeFieldBegin('pictureStatus', TType::STRING, 11);
      $xfer += $output->writeString($this->pictureStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->members !== null) {
      if (!is_array($this->members)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('members', TType::LST, 20);
      {
        $output->writeListBegin(TType::STRUCT, count($this->members));
        {
          foreach ($this->members as $iter40)
          {
            $xfer += $iter40->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creator !== null) {
      if (!is_object($this->creator)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creator', TType::STRUCT, 21);
      $xfer += $this->creator->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invitee !== null) {
      if (!is_array($this->invitee)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('invitee', TType::LST, 22);
      {
        $output->writeListBegin(TType::STRUCT, count($this->invitee));
        {
          foreach ($this->invitee as $iter41)
          {
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationDisabled !== null) {
      $xfer += $output->writeFieldBegin('notificationDisabled', TType::BOOL, 31);
      $xfer += $output->writeBool($this->notificationDisabled);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IdentityCredential {
  static $_TSPEC;

  public $provider = null;
  public $identifier = null;
  public $password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'provider',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'identifier',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['provider'])) {
        $this->provider = $vals['provider'];
      }
      if (isset($vals['identifier'])) {
        $this->identifier = $vals['identifier'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
    }
  }

  public function getName() {
    return 'IdentityCredential';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->provider);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->identifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IdentityCredential');
    if ($this->provider !== null) {
      $xfer += $output->writeFieldBegin('provider', TType::I32, 1);
      $xfer += $output->writeI32($this->provider);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identifier !== null) {
      $xfer += $output->writeFieldBegin('identifier', TType::STRING, 2);
      $xfer += $output->writeString($this->identifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 3);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LoginResult {
  static $_TSPEC;

  public $authToken = null;
  public $certificate = null;
  public $verifier = null;
  public $pinCode = null;
  public $type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authToken',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'certificate',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'verifier',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'pinCode',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authToken'])) {
        $this->authToken = $vals['authToken'];
      }
      if (isset($vals['certificate'])) {
        $this->certificate = $vals['certificate'];
      }
      if (isset($vals['verifier'])) {
        $this->verifier = $vals['verifier'];
      }
      if (isset($vals['pinCode'])) {
        $this->pinCode = $vals['pinCode'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
    }
  }

  public function getName() {
    return 'LoginResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->certificate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->verifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pinCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LoginResult');
    if ($this->authToken !== null) {
      $xfer += $output->writeFieldBegin('authToken', TType::STRING, 1);
      $xfer += $output->writeString($this->authToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->certificate !== null) {
      $xfer += $output->writeFieldBegin('certificate', TType::STRING, 2);
      $xfer += $output->writeString($this->certificate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verifier !== null) {
      $xfer += $output->writeFieldBegin('verifier', TType::STRING, 3);
      $xfer += $output->writeString($this->verifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pinCode !== null) {
      $xfer += $output->writeFieldBegin('pinCode', TType::STRING, 4);
      $xfer += $output->writeString($this->pinCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 5);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LoginSession {
  static $_TSPEC;

  public $tokenKey = null;
  public $expirationTime = null;
  public $applicationType = null;
  public $systemName = null;
  public $accessLocation = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tokenKey',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'expirationTime',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'applicationType',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'systemName',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'accessLocation',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tokenKey'])) {
        $this->tokenKey = $vals['tokenKey'];
      }
      if (isset($vals['expirationTime'])) {
        $this->expirationTime = $vals['expirationTime'];
      }
      if (isset($vals['applicationType'])) {
        $this->applicationType = $vals['applicationType'];
      }
      if (isset($vals['systemName'])) {
        $this->systemName = $vals['systemName'];
      }
      if (isset($vals['accessLocation'])) {
        $this->accessLocation = $vals['accessLocation'];
      }
    }
  }

  public function getName() {
    return 'LoginSession';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tokenKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expirationTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->applicationType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->systemName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessLocation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LoginSession');
    if ($this->tokenKey !== null) {
      $xfer += $output->writeFieldBegin('tokenKey', TType::STRING, 1);
      $xfer += $output->writeString($this->tokenKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expirationTime !== null) {
      $xfer += $output->writeFieldBegin('expirationTime', TType::I64, 3);
      $xfer += $output->writeI64($this->expirationTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applicationType !== null) {
      $xfer += $output->writeFieldBegin('applicationType', TType::I32, 11);
      $xfer += $output->writeI32($this->applicationType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->systemName !== null) {
      $xfer += $output->writeFieldBegin('systemName', TType::STRING, 12);
      $xfer += $output->writeString($this->systemName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessLocation !== null) {
      $xfer += $output->writeFieldBegin('accessLocation', TType::STRING, 22);
      $xfer += $output->writeString($this->accessLocation);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Message {
  static $_TSPEC;

  public $from = null;
  public $to = null;
  public $toType = null;
  public $id = null;
  public $createdTime = null;
  public $deliveredTime = null;
  public $text = null;
  public $location = null;
  public $hasContent = null;
  public $contentType = null;
  public $contentPreview = null;
  public $contentMetadata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'from',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'to',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'toType',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'deliveredTime',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'text',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'location',
          'type' => TType::STRUCT,
          'class' => '\Location',
          ),
        14 => array(
          'var' => 'hasContent',
          'type' => TType::BOOL,
          ),
        15 => array(
          'var' => 'contentType',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'contentPreview',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'contentMetadata',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['from'])) {
        $this->from = $vals['from'];
      }
      if (isset($vals['to'])) {
        $this->to = $vals['to'];
      }
      if (isset($vals['toType'])) {
        $this->toType = $vals['toType'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['deliveredTime'])) {
        $this->deliveredTime = $vals['deliveredTime'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
      if (isset($vals['location'])) {
        $this->location = $vals['location'];
      }
      if (isset($vals['hasContent'])) {
        $this->hasContent = $vals['hasContent'];
      }
      if (isset($vals['contentType'])) {
        $this->contentType = $vals['contentType'];
      }
      if (isset($vals['contentPreview'])) {
        $this->contentPreview = $vals['contentPreview'];
      }
      if (isset($vals['contentMetadata'])) {
        $this->contentMetadata = $vals['contentMetadata'];
      }
    }
  }

  public function getName() {
    return 'Message';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->from);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->to);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->toType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->deliveredTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->location = new \Location();
            $xfer += $this->location->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->contentType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contentPreview);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::MAP) {
            $this->contentMetadata = array();
            $_size42 = 0;
            $_ktype43 = 0;
            $_vtype44 = 0;
            $xfer += $input->readMapBegin($_ktype43, $_vtype44, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $key47 = '';
              $val48 = '';
              $xfer += $input->readString($key47);
              $xfer += $input->readString($val48);
              $this->contentMetadata[$key47] = $val48;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Message');
    if ($this->from !== null) {
      $xfer += $output->writeFieldBegin('from', TType::STRING, 1);
      $xfer += $output->writeString($this->from);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->to !== null) {
      $xfer += $output->writeFieldBegin('to', TType::STRING, 2);
      $xfer += $output->writeString($this->to);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toType !== null) {
      $xfer += $output->writeFieldBegin('toType', TType::I32, 3);
      $xfer += $output->writeI32($this->toType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 4);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 5);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deliveredTime !== null) {
      $xfer += $output->writeFieldBegin('deliveredTime', TType::I64, 6);
      $xfer += $output->writeI64($this->deliveredTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 10);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->location !== null) {
      if (!is_object($this->location)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('location', TType::STRUCT, 11);
      $xfer += $this->location->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hasContent !== null) {
      $xfer += $output->writeFieldBegin('hasContent', TType::BOOL, 14);
      $xfer += $output->writeBool($this->hasContent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentType !== null) {
      $xfer += $output->writeFieldBegin('contentType', TType::I32, 15);
      $xfer += $output->writeI32($this->contentType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentPreview !== null) {
      $xfer += $output->writeFieldBegin('contentPreview', TType::STRING, 17);
      $xfer += $output->writeString($this->contentPreview);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentMetadata !== null) {
      if (!is_array($this->contentMetadata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contentMetadata', TType::MAP, 18);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->contentMetadata));
        {
          foreach ($this->contentMetadata as $kiter49 => $viter50)
          {
            $xfer += $output->writeString($kiter49);
            $xfer += $output->writeString($viter50);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Operation {
  static $_TSPEC;

  public $revision = null;
  public $createdTime = null;
  public $type = null;
  public $reqSeq = null;
  public $checksum = null;
  public $status = null;
  public $param1 = null;
  public $param2 = null;
  public $param3 = null;
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'revision',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'reqSeq',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'checksum',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'param1',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'param2',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'param3',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'message',
          'type' => TType::STRUCT,
          'class' => '\Message',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['reqSeq'])) {
        $this->reqSeq = $vals['reqSeq'];
      }
      if (isset($vals['checksum'])) {
        $this->checksum = $vals['checksum'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['param1'])) {
        $this->param1 = $vals['param1'];
      }
      if (isset($vals['param2'])) {
        $this->param2 = $vals['param2'];
      }
      if (isset($vals['param3'])) {
        $this->param3 = $vals['param3'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'Operation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reqSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->checksum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->param3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRUCT) {
            $this->message = new \Message();
            $xfer += $this->message->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Operation');
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I64, 1);
      $xfer += $output->writeI64($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 3);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reqSeq !== null) {
      $xfer += $output->writeFieldBegin('reqSeq', TType::I32, 4);
      $xfer += $output->writeI32($this->reqSeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->checksum !== null) {
      $xfer += $output->writeFieldBegin('checksum', TType::STRING, 5);
      $xfer += $output->writeString($this->checksum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 7);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param1 !== null) {
      $xfer += $output->writeFieldBegin('param1', TType::STRING, 10);
      $xfer += $output->writeString($this->param1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param2 !== null) {
      $xfer += $output->writeFieldBegin('param2', TType::STRING, 11);
      $xfer += $output->writeString($this->param2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->param3 !== null) {
      $xfer += $output->writeFieldBegin('param3', TType::STRING, 12);
      $xfer += $output->writeString($this->param3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      if (!is_object($this->message)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('message', TType::STRUCT, 20);
      $xfer += $this->message->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PaymentReservation {
  static $_TSPEC;

  public $receiverMid = null;
  public $productId = null;
  public $language = null;
  public $location = null;
  public $currency = null;
  public $price = null;
  public $appStoreCode = null;
  public $messageText = null;
  public $messageTemplate = null;
  public $packageId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'receiverMid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'productId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'language',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'location',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'currency',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'price',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'appStoreCode',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'messageText',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'messageTemplate',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'packageId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['receiverMid'])) {
        $this->receiverMid = $vals['receiverMid'];
      }
      if (isset($vals['productId'])) {
        $this->productId = $vals['productId'];
      }
      if (isset($vals['language'])) {
        $this->language = $vals['language'];
      }
      if (isset($vals['location'])) {
        $this->location = $vals['location'];
      }
      if (isset($vals['currency'])) {
        $this->currency = $vals['currency'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['appStoreCode'])) {
        $this->appStoreCode = $vals['appStoreCode'];
      }
      if (isset($vals['messageText'])) {
        $this->messageText = $vals['messageText'];
      }
      if (isset($vals['messageTemplate'])) {
        $this->messageTemplate = $vals['messageTemplate'];
      }
      if (isset($vals['packageId'])) {
        $this->packageId = $vals['packageId'];
      }
    }
  }

  public function getName() {
    return 'PaymentReservation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiverMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->productId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->language);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->location);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currency);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appStoreCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageText);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->messageTemplate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->packageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PaymentReservation');
    if ($this->receiverMid !== null) {
      $xfer += $output->writeFieldBegin('receiverMid', TType::STRING, 1);
      $xfer += $output->writeString($this->receiverMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productId !== null) {
      $xfer += $output->writeFieldBegin('productId', TType::STRING, 2);
      $xfer += $output->writeString($this->productId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->language !== null) {
      $xfer += $output->writeFieldBegin('language', TType::STRING, 3);
      $xfer += $output->writeString($this->language);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->location !== null) {
      $xfer += $output->writeFieldBegin('location', TType::STRING, 4);
      $xfer += $output->writeString($this->location);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currency !== null) {
      $xfer += $output->writeFieldBegin('currency', TType::STRING, 5);
      $xfer += $output->writeString($this->currency);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::STRING, 6);
      $xfer += $output->writeString($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appStoreCode !== null) {
      $xfer += $output->writeFieldBegin('appStoreCode', TType::I32, 7);
      $xfer += $output->writeI32($this->appStoreCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageText !== null) {
      $xfer += $output->writeFieldBegin('messageText', TType::STRING, 8);
      $xfer += $output->writeString($this->messageText);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageTemplate !== null) {
      $xfer += $output->writeFieldBegin('messageTemplate', TType::I32, 9);
      $xfer += $output->writeI32($this->messageTemplate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageId !== null) {
      $xfer += $output->writeFieldBegin('packageId', TType::I64, 10);
      $xfer += $output->writeI64($this->packageId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PaymentReservationResult {
  static $_TSPEC;

  public $orderId = null;
  public $confirmUrl = null;
  public $extras = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'confirmUrl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'extras',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['confirmUrl'])) {
        $this->confirmUrl = $vals['confirmUrl'];
      }
      if (isset($vals['extras'])) {
        $this->extras = $vals['extras'];
      }
    }
  }

  public function getName() {
    return 'PaymentReservationResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->confirmUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->extras = array();
            $_size51 = 0;
            $_ktype52 = 0;
            $_vtype53 = 0;
            $xfer += $input->readMapBegin($_ktype52, $_vtype53, $_size51);
            for ($_i55 = 0; $_i55 < $_size51; ++$_i55)
            {
              $key56 = '';
              $val57 = '';
              $xfer += $input->readString($key56);
              $xfer += $input->readString($val57);
              $this->extras[$key56] = $val57;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PaymentReservationResult');
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::STRING, 1);
      $xfer += $output->writeString($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->confirmUrl !== null) {
      $xfer += $output->writeFieldBegin('confirmUrl', TType::STRING, 2);
      $xfer += $output->writeString($this->confirmUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extras !== null) {
      if (!is_array($this->extras)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extras', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extras));
        {
          foreach ($this->extras as $kiter58 => $viter59)
          {
            $xfer += $output->writeString($kiter58);
            $xfer += $output->writeString($viter59);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Product {
  static $_TSPEC;

  public $productId = null;
  public $packageId = null;
  public $version = null;
  public $authorName = null;
  public $onSale = null;
  public $validDays = null;
  public $saleType = null;
  public $copyright = null;
  public $title = null;
  public $descriptionText = null;
  public $shopOrderId = null;
  public $fromMid = null;
  public $toMid = null;
  public $validUntil = null;
  public $priceTier = null;
  public $price = null;
  public $currency = null;
  public $currencySymbol = null;
  public $paymentType = null;
  public $createDate = null;
  public $ownFlag = null;
  public $eventType = null;
  public $urlSchema = null;
  public $downloadUrl = null;
  public $buddyMid = null;
  public $publishSince = null;
  public $newFlag = null;
  public $missionFlag = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'productId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'packageId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'version',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'authorName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'onSale',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'validDays',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'saleType',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'copyright',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'descriptionText',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'shopOrderId',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'fromMid',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'toMid',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'validUntil',
          'type' => TType::I64,
          ),
        15 => array(
          'var' => 'priceTier',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'price',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'currency',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'currencySymbol',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'paymentType',
          'type' => TType::I32,
          ),
        20 => array(
          'var' => 'createDate',
          'type' => TType::I64,
          ),
        21 => array(
          'var' => 'ownFlag',
          'type' => TType::BOOL,
          ),
        22 => array(
          'var' => 'eventType',
          'type' => TType::I32,
          ),
        23 => array(
          'var' => 'urlSchema',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'downloadUrl',
          'type' => TType::STRING,
          ),
        25 => array(
          'var' => 'buddyMid',
          'type' => TType::STRING,
          ),
        26 => array(
          'var' => 'publishSince',
          'type' => TType::I64,
          ),
        27 => array(
          'var' => 'newFlag',
          'type' => TType::BOOL,
          ),
        28 => array(
          'var' => 'missionFlag',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['productId'])) {
        $this->productId = $vals['productId'];
      }
      if (isset($vals['packageId'])) {
        $this->packageId = $vals['packageId'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['authorName'])) {
        $this->authorName = $vals['authorName'];
      }
      if (isset($vals['onSale'])) {
        $this->onSale = $vals['onSale'];
      }
      if (isset($vals['validDays'])) {
        $this->validDays = $vals['validDays'];
      }
      if (isset($vals['saleType'])) {
        $this->saleType = $vals['saleType'];
      }
      if (isset($vals['copyright'])) {
        $this->copyright = $vals['copyright'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['descriptionText'])) {
        $this->descriptionText = $vals['descriptionText'];
      }
      if (isset($vals['shopOrderId'])) {
        $this->shopOrderId = $vals['shopOrderId'];
      }
      if (isset($vals['fromMid'])) {
        $this->fromMid = $vals['fromMid'];
      }
      if (isset($vals['toMid'])) {
        $this->toMid = $vals['toMid'];
      }
      if (isset($vals['validUntil'])) {
        $this->validUntil = $vals['validUntil'];
      }
      if (isset($vals['priceTier'])) {
        $this->priceTier = $vals['priceTier'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['currency'])) {
        $this->currency = $vals['currency'];
      }
      if (isset($vals['currencySymbol'])) {
        $this->currencySymbol = $vals['currencySymbol'];
      }
      if (isset($vals['paymentType'])) {
        $this->paymentType = $vals['paymentType'];
      }
      if (isset($vals['createDate'])) {
        $this->createDate = $vals['createDate'];
      }
      if (isset($vals['ownFlag'])) {
        $this->ownFlag = $vals['ownFlag'];
      }
      if (isset($vals['eventType'])) {
        $this->eventType = $vals['eventType'];
      }
      if (isset($vals['urlSchema'])) {
        $this->urlSchema = $vals['urlSchema'];
      }
      if (isset($vals['downloadUrl'])) {
        $this->downloadUrl = $vals['downloadUrl'];
      }
      if (isset($vals['buddyMid'])) {
        $this->buddyMid = $vals['buddyMid'];
      }
      if (isset($vals['publishSince'])) {
        $this->publishSince = $vals['publishSince'];
      }
      if (isset($vals['newFlag'])) {
        $this->newFlag = $vals['newFlag'];
      }
      if (isset($vals['missionFlag'])) {
        $this->missionFlag = $vals['missionFlag'];
      }
    }
  }

  public function getName() {
    return 'Product';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->productId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->packageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authorName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->onSale);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->validDays);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->saleType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->copyright);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descriptionText);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->shopOrderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fromMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->toMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->validUntil);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->priceTier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currency);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->currencySymbol);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->paymentType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->ownFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->eventType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->urlSchema);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->downloadUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->buddyMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->publishSince);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->newFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->missionFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Product');
    if ($this->productId !== null) {
      $xfer += $output->writeFieldBegin('productId', TType::STRING, 1);
      $xfer += $output->writeString($this->productId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageId !== null) {
      $xfer += $output->writeFieldBegin('packageId', TType::I64, 2);
      $xfer += $output->writeI64($this->packageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I32, 3);
      $xfer += $output->writeI32($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorName !== null) {
      $xfer += $output->writeFieldBegin('authorName', TType::STRING, 4);
      $xfer += $output->writeString($this->authorName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onSale !== null) {
      $xfer += $output->writeFieldBegin('onSale', TType::BOOL, 5);
      $xfer += $output->writeBool($this->onSale);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validDays !== null) {
      $xfer += $output->writeFieldBegin('validDays', TType::I32, 6);
      $xfer += $output->writeI32($this->validDays);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->saleType !== null) {
      $xfer += $output->writeFieldBegin('saleType', TType::I32, 7);
      $xfer += $output->writeI32($this->saleType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->copyright !== null) {
      $xfer += $output->writeFieldBegin('copyright', TType::STRING, 8);
      $xfer += $output->writeString($this->copyright);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 9);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descriptionText !== null) {
      $xfer += $output->writeFieldBegin('descriptionText', TType::STRING, 10);
      $xfer += $output->writeString($this->descriptionText);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shopOrderId !== null) {
      $xfer += $output->writeFieldBegin('shopOrderId', TType::I64, 11);
      $xfer += $output->writeI64($this->shopOrderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromMid !== null) {
      $xfer += $output->writeFieldBegin('fromMid', TType::STRING, 12);
      $xfer += $output->writeString($this->fromMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toMid !== null) {
      $xfer += $output->writeFieldBegin('toMid', TType::STRING, 13);
      $xfer += $output->writeString($this->toMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validUntil !== null) {
      $xfer += $output->writeFieldBegin('validUntil', TType::I64, 14);
      $xfer += $output->writeI64($this->validUntil);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceTier !== null) {
      $xfer += $output->writeFieldBegin('priceTier', TType::I32, 15);
      $xfer += $output->writeI32($this->priceTier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::STRING, 16);
      $xfer += $output->writeString($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currency !== null) {
      $xfer += $output->writeFieldBegin('currency', TType::STRING, 17);
      $xfer += $output->writeString($this->currency);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currencySymbol !== null) {
      $xfer += $output->writeFieldBegin('currencySymbol', TType::STRING, 18);
      $xfer += $output->writeString($this->currencySymbol);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->paymentType !== null) {
      $xfer += $output->writeFieldBegin('paymentType', TType::I32, 19);
      $xfer += $output->writeI32($this->paymentType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createDate !== null) {
      $xfer += $output->writeFieldBegin('createDate', TType::I64, 20);
      $xfer += $output->writeI64($this->createDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ownFlag !== null) {
      $xfer += $output->writeFieldBegin('ownFlag', TType::BOOL, 21);
      $xfer += $output->writeBool($this->ownFlag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eventType !== null) {
      $xfer += $output->writeFieldBegin('eventType', TType::I32, 22);
      $xfer += $output->writeI32($this->eventType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->urlSchema !== null) {
      $xfer += $output->writeFieldBegin('urlSchema', TType::STRING, 23);
      $xfer += $output->writeString($this->urlSchema);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->downloadUrl !== null) {
      $xfer += $output->writeFieldBegin('downloadUrl', TType::STRING, 24);
      $xfer += $output->writeString($this->downloadUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buddyMid !== null) {
      $xfer += $output->writeFieldBegin('buddyMid', TType::STRING, 25);
      $xfer += $output->writeString($this->buddyMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->publishSince !== null) {
      $xfer += $output->writeFieldBegin('publishSince', TType::I64, 26);
      $xfer += $output->writeI64($this->publishSince);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->newFlag !== null) {
      $xfer += $output->writeFieldBegin('newFlag', TType::BOOL, 27);
      $xfer += $output->writeBool($this->newFlag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->missionFlag !== null) {
      $xfer += $output->writeFieldBegin('missionFlag', TType::BOOL, 28);
      $xfer += $output->writeBool($this->missionFlag);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProductList {
  static $_TSPEC;

  public $hasNext = null;
  public $bannerSequence = null;
  public $bannerTargetType = null;
  public $bannerTargetPath = null;
  public $productList_ = null;
  public $bannerLang = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hasNext',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'bannerSequence',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'bannerTargetType',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'bannerTargetPath',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'productList_',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Product',
            ),
          ),
        8 => array(
          'var' => 'bannerLang',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['hasNext'])) {
        $this->hasNext = $vals['hasNext'];
      }
      if (isset($vals['bannerSequence'])) {
        $this->bannerSequence = $vals['bannerSequence'];
      }
      if (isset($vals['bannerTargetType'])) {
        $this->bannerTargetType = $vals['bannerTargetType'];
      }
      if (isset($vals['bannerTargetPath'])) {
        $this->bannerTargetPath = $vals['bannerTargetPath'];
      }
      if (isset($vals['productList_'])) {
        $this->productList_ = $vals['productList_'];
      }
      if (isset($vals['bannerLang'])) {
        $this->bannerLang = $vals['bannerLang'];
      }
    }
  }

  public function getName() {
    return 'ProductList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasNext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->bannerSequence);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bannerTargetType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bannerTargetPath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->productList_ = array();
            $_size60 = 0;
            $_etype63 = 0;
            $xfer += $input->readListBegin($_etype63, $_size60);
            for ($_i64 = 0; $_i64 < $_size60; ++$_i64)
            {
              $elem65 = null;
              $elem65 = new \Product();
              $xfer += $elem65->read($input);
              $this->productList_ []= $elem65;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bannerLang);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProductList');
    if ($this->hasNext !== null) {
      $xfer += $output->writeFieldBegin('hasNext', TType::BOOL, 1);
      $xfer += $output->writeBool($this->hasNext);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bannerSequence !== null) {
      $xfer += $output->writeFieldBegin('bannerSequence', TType::I64, 4);
      $xfer += $output->writeI64($this->bannerSequence);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bannerTargetType !== null) {
      $xfer += $output->writeFieldBegin('bannerTargetType', TType::I32, 5);
      $xfer += $output->writeI32($this->bannerTargetType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bannerTargetPath !== null) {
      $xfer += $output->writeFieldBegin('bannerTargetPath', TType::STRING, 6);
      $xfer += $output->writeString($this->bannerTargetPath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productList_ !== null) {
      if (!is_array($this->productList_)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('productList_', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRUCT, count($this->productList_));
        {
          foreach ($this->productList_ as $iter66)
          {
            $xfer += $iter66->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bannerLang !== null) {
      $xfer += $output->writeFieldBegin('bannerLang', TType::STRING, 8);
      $xfer += $output->writeString($this->bannerLang);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProductSimple {
  static $_TSPEC;

  public $productId = null;
  public $packageId = null;
  public $version = null;
  public $onSale = null;
  public $validUntil = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'productId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'packageId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'version',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'onSale',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'validUntil',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['productId'])) {
        $this->productId = $vals['productId'];
      }
      if (isset($vals['packageId'])) {
        $this->packageId = $vals['packageId'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['onSale'])) {
        $this->onSale = $vals['onSale'];
      }
      if (isset($vals['validUntil'])) {
        $this->validUntil = $vals['validUntil'];
      }
    }
  }

  public function getName() {
    return 'ProductSimple';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->productId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->packageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->onSale);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->validUntil);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProductSimple');
    if ($this->productId !== null) {
      $xfer += $output->writeFieldBegin('productId', TType::STRING, 1);
      $xfer += $output->writeString($this->productId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageId !== null) {
      $xfer += $output->writeFieldBegin('packageId', TType::I64, 2);
      $xfer += $output->writeI64($this->packageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I32, 3);
      $xfer += $output->writeI32($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onSale !== null) {
      $xfer += $output->writeFieldBegin('onSale', TType::BOOL, 4);
      $xfer += $output->writeBool($this->onSale);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->validUntil !== null) {
      $xfer += $output->writeFieldBegin('validUntil', TType::I64, 5);
      $xfer += $output->writeI64($this->validUntil);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProductSimpleList {
  static $_TSPEC;

  public $hasNext = null;
  public $reinvokeHour = null;
  public $lastVersionSeq = null;
  public $productList = null;
  public $recentNewReleaseDate = null;
  public $recentEventReleaseDate = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hasNext',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'reinvokeHour',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'lastVersionSeq',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'productList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\ProductSimple',
            ),
          ),
        5 => array(
          'var' => 'recentNewReleaseDate',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'recentEventReleaseDate',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['hasNext'])) {
        $this->hasNext = $vals['hasNext'];
      }
      if (isset($vals['reinvokeHour'])) {
        $this->reinvokeHour = $vals['reinvokeHour'];
      }
      if (isset($vals['lastVersionSeq'])) {
        $this->lastVersionSeq = $vals['lastVersionSeq'];
      }
      if (isset($vals['productList'])) {
        $this->productList = $vals['productList'];
      }
      if (isset($vals['recentNewReleaseDate'])) {
        $this->recentNewReleaseDate = $vals['recentNewReleaseDate'];
      }
      if (isset($vals['recentEventReleaseDate'])) {
        $this->recentEventReleaseDate = $vals['recentEventReleaseDate'];
      }
    }
  }

  public function getName() {
    return 'ProductSimpleList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasNext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reinvokeHour);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastVersionSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->productList = array();
            $_size67 = 0;
            $_etype70 = 0;
            $xfer += $input->readListBegin($_etype70, $_size67);
            for ($_i71 = 0; $_i71 < $_size67; ++$_i71)
            {
              $elem72 = null;
              $elem72 = new \ProductSimple();
              $xfer += $elem72->read($input);
              $this->productList []= $elem72;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->recentNewReleaseDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->recentEventReleaseDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProductSimpleList');
    if ($this->hasNext !== null) {
      $xfer += $output->writeFieldBegin('hasNext', TType::BOOL, 1);
      $xfer += $output->writeBool($this->hasNext);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reinvokeHour !== null) {
      $xfer += $output->writeFieldBegin('reinvokeHour', TType::I32, 2);
      $xfer += $output->writeI32($this->reinvokeHour);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastVersionSeq !== null) {
      $xfer += $output->writeFieldBegin('lastVersionSeq', TType::I64, 3);
      $xfer += $output->writeI64($this->lastVersionSeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productList !== null) {
      if (!is_array($this->productList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('productList', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->productList));
        {
          foreach ($this->productList as $iter73)
          {
            $xfer += $iter73->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recentNewReleaseDate !== null) {
      $xfer += $output->writeFieldBegin('recentNewReleaseDate', TType::I64, 5);
      $xfer += $output->writeI64($this->recentNewReleaseDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recentEventReleaseDate !== null) {
      $xfer += $output->writeFieldBegin('recentEventReleaseDate', TType::I64, 6);
      $xfer += $output->writeI64($this->recentEventReleaseDate);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Profile {
  static $_TSPEC;

  public $mid = null;
  public $userid = null;
  public $phone = null;
  public $email = null;
  public $regionCode = null;
  public $displayName = null;
  public $phoneticName = null;
  public $pictureStatus = null;
  public $thumbnailUrl = null;
  public $statusMessage = null;
  public $allowSearchByUserid = null;
  public $allowSearchByEmail = null;
  public $picturePath = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'userid',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'regionCode',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'displayName',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'phoneticName',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'pictureStatus',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'thumbnailUrl',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'statusMessage',
          'type' => TType::STRING,
          ),
        31 => array(
          'var' => 'allowSearchByUserid',
          'type' => TType::BOOL,
          ),
        32 => array(
          'var' => 'allowSearchByEmail',
          'type' => TType::BOOL,
          ),
        33 => array(
          'var' => 'picturePath',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['userid'])) {
        $this->userid = $vals['userid'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['regionCode'])) {
        $this->regionCode = $vals['regionCode'];
      }
      if (isset($vals['displayName'])) {
        $this->displayName = $vals['displayName'];
      }
      if (isset($vals['phoneticName'])) {
        $this->phoneticName = $vals['phoneticName'];
      }
      if (isset($vals['pictureStatus'])) {
        $this->pictureStatus = $vals['pictureStatus'];
      }
      if (isset($vals['thumbnailUrl'])) {
        $this->thumbnailUrl = $vals['thumbnailUrl'];
      }
      if (isset($vals['statusMessage'])) {
        $this->statusMessage = $vals['statusMessage'];
      }
      if (isset($vals['allowSearchByUserid'])) {
        $this->allowSearchByUserid = $vals['allowSearchByUserid'];
      }
      if (isset($vals['allowSearchByEmail'])) {
        $this->allowSearchByEmail = $vals['allowSearchByEmail'];
      }
      if (isset($vals['picturePath'])) {
        $this->picturePath = $vals['picturePath'];
      }
    }
  }

  public function getName() {
    return 'Profile';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->regionCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->displayName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phoneticName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pictureStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->thumbnailUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statusMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->allowSearchByUserid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->allowSearchByEmail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->picturePath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Profile');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userid !== null) {
      $xfer += $output->writeFieldBegin('userid', TType::STRING, 3);
      $xfer += $output->writeString($this->userid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 10);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 11);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->regionCode !== null) {
      $xfer += $output->writeFieldBegin('regionCode', TType::STRING, 12);
      $xfer += $output->writeString($this->regionCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->displayName !== null) {
      $xfer += $output->writeFieldBegin('displayName', TType::STRING, 20);
      $xfer += $output->writeString($this->displayName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phoneticName !== null) {
      $xfer += $output->writeFieldBegin('phoneticName', TType::STRING, 21);
      $xfer += $output->writeString($this->phoneticName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pictureStatus !== null) {
      $xfer += $output->writeFieldBegin('pictureStatus', TType::STRING, 22);
      $xfer += $output->writeString($this->pictureStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thumbnailUrl !== null) {
      $xfer += $output->writeFieldBegin('thumbnailUrl', TType::STRING, 23);
      $xfer += $output->writeString($this->thumbnailUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusMessage !== null) {
      $xfer += $output->writeFieldBegin('statusMessage', TType::STRING, 24);
      $xfer += $output->writeString($this->statusMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->allowSearchByUserid !== null) {
      $xfer += $output->writeFieldBegin('allowSearchByUserid', TType::BOOL, 31);
      $xfer += $output->writeBool($this->allowSearchByUserid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->allowSearchByEmail !== null) {
      $xfer += $output->writeFieldBegin('allowSearchByEmail', TType::BOOL, 32);
      $xfer += $output->writeBool($this->allowSearchByEmail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->picturePath !== null) {
      $xfer += $output->writeFieldBegin('picturePath', TType::STRING, 33);
      $xfer += $output->writeString($this->picturePath);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProximityMatchCandidateResult {
  static $_TSPEC;

  public $users = null;
  public $buddies = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'users',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Contact',
            ),
          ),
        2 => array(
          'var' => 'buddies',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Contact',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['users'])) {
        $this->users = $vals['users'];
      }
      if (isset($vals['buddies'])) {
        $this->buddies = $vals['buddies'];
      }
    }
  }

  public function getName() {
    return 'ProximityMatchCandidateResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->users = array();
            $_size74 = 0;
            $_etype77 = 0;
            $xfer += $input->readListBegin($_etype77, $_size74);
            for ($_i78 = 0; $_i78 < $_size74; ++$_i78)
            {
              $elem79 = null;
              $elem79 = new \Contact();
              $xfer += $elem79->read($input);
              $this->users []= $elem79;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->buddies = array();
            $_size80 = 0;
            $_etype83 = 0;
            $xfer += $input->readListBegin($_etype83, $_size80);
            for ($_i84 = 0; $_i84 < $_size80; ++$_i84)
            {
              $elem85 = null;
              $elem85 = new \Contact();
              $xfer += $elem85->read($input);
              $this->buddies []= $elem85;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProximityMatchCandidateResult');
    if ($this->users !== null) {
      if (!is_array($this->users)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('users', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->users));
        {
          foreach ($this->users as $iter86)
          {
            $xfer += $iter86->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buddies !== null) {
      if (!is_array($this->buddies)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('buddies', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->buddies));
        {
          foreach ($this->buddies as $iter87)
          {
            $xfer += $iter87->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RegisterWithSnsIdResult {
  static $_TSPEC;

  public $authToken = null;
  public $userCreated = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authToken',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userCreated',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authToken'])) {
        $this->authToken = $vals['authToken'];
      }
      if (isset($vals['userCreated'])) {
        $this->userCreated = $vals['userCreated'];
      }
    }
  }

  public function getName() {
    return 'RegisterWithSnsIdResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->userCreated);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RegisterWithSnsIdResult');
    if ($this->authToken !== null) {
      $xfer += $output->writeFieldBegin('authToken', TType::STRING, 1);
      $xfer += $output->writeString($this->authToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userCreated !== null) {
      $xfer += $output->writeFieldBegin('userCreated', TType::BOOL, 2);
      $xfer += $output->writeBool($this->userCreated);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Room {
  static $_TSPEC;

  public $mid = null;
  public $createdTime = null;
  public $contacts = null;
  public $notificationDisabled = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'contacts',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Contact',
            ),
          ),
        31 => array(
          'var' => 'notificationDisabled',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['contacts'])) {
        $this->contacts = $vals['contacts'];
      }
      if (isset($vals['notificationDisabled'])) {
        $this->notificationDisabled = $vals['notificationDisabled'];
      }
    }
  }

  public function getName() {
    return 'Room';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->contacts = array();
            $_size88 = 0;
            $_etype91 = 0;
            $xfer += $input->readListBegin($_etype91, $_size88);
            for ($_i92 = 0; $_i92 < $_size88; ++$_i92)
            {
              $elem93 = null;
              $elem93 = new \Contact();
              $xfer += $elem93->read($input);
              $this->contacts []= $elem93;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationDisabled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Room');
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 1);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contacts !== null) {
      if (!is_array($this->contacts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contacts', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->contacts));
        {
          foreach ($this->contacts as $iter94)
          {
            $xfer += $iter94->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationDisabled !== null) {
      $xfer += $output->writeFieldBegin('notificationDisabled', TType::BOOL, 31);
      $xfer += $output->writeBool($this->notificationDisabled);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RSAKey {
  static $_TSPEC;

  public $keynm = null;
  public $nvalue = null;
  public $evalue = null;
  public $sessionKey = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keynm',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'nvalue',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'evalue',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'sessionKey',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keynm'])) {
        $this->keynm = $vals['keynm'];
      }
      if (isset($vals['nvalue'])) {
        $this->nvalue = $vals['nvalue'];
      }
      if (isset($vals['evalue'])) {
        $this->evalue = $vals['evalue'];
      }
      if (isset($vals['sessionKey'])) {
        $this->sessionKey = $vals['sessionKey'];
      }
    }
  }

  public function getName() {
    return 'RSAKey';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->keynm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nvalue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->evalue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RSAKey');
    if ($this->keynm !== null) {
      $xfer += $output->writeFieldBegin('keynm', TType::STRING, 1);
      $xfer += $output->writeString($this->keynm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nvalue !== null) {
      $xfer += $output->writeFieldBegin('nvalue', TType::STRING, 2);
      $xfer += $output->writeString($this->nvalue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->evalue !== null) {
      $xfer += $output->writeFieldBegin('evalue', TType::STRING, 3);
      $xfer += $output->writeString($this->evalue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sessionKey !== null) {
      $xfer += $output->writeFieldBegin('sessionKey', TType::STRING, 4);
      $xfer += $output->writeString($this->sessionKey);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Settings {
  static $_TSPEC;

  public $notificationEnable = null;
  public $notificationMuteExpiration = null;
  public $notificationNewMessage = null;
  public $notificationGroupInvitation = null;
  public $notificationShowMessage = null;
  public $notificationIncomingCall = null;
  public $notificationSoundMessage = null;
  public $notificationSoundGroup = null;
  public $notificationDisabledWithSub = null;
  public $privacySyncContacts = null;
  public $privacySearchByPhoneNumber = null;
  public $privacySearchByUserid = null;
  public $privacySearchByEmail = null;
  public $privacyAllowSecondaryDeviceLogin = null;
  public $privacyProfileImagePostToMyhome = null;
  public $privacyReceiveMessagesFromNotFriend = null;
  public $contactMyTicket = null;
  public $identityProvider = null;
  public $identityIdentifier = null;
  public $snsAccounts = null;
  public $phoneRegistration = null;
  public $emailConfirmationStatus = null;
  public $preferenceLocale = null;
  public $customModes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        10 => array(
          'var' => 'notificationEnable',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'notificationMuteExpiration',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'notificationNewMessage',
          'type' => TType::BOOL,
          ),
        13 => array(
          'var' => 'notificationGroupInvitation',
          'type' => TType::BOOL,
          ),
        14 => array(
          'var' => 'notificationShowMessage',
          'type' => TType::BOOL,
          ),
        15 => array(
          'var' => 'notificationIncomingCall',
          'type' => TType::BOOL,
          ),
        16 => array(
          'var' => 'notificationSoundMessage',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'notificationSoundGroup',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'notificationDisabledWithSub',
          'type' => TType::BOOL,
          ),
        20 => array(
          'var' => 'privacySyncContacts',
          'type' => TType::BOOL,
          ),
        21 => array(
          'var' => 'privacySearchByPhoneNumber',
          'type' => TType::BOOL,
          ),
        22 => array(
          'var' => 'privacySearchByUserid',
          'type' => TType::BOOL,
          ),
        23 => array(
          'var' => 'privacySearchByEmail',
          'type' => TType::BOOL,
          ),
        24 => array(
          'var' => 'privacyAllowSecondaryDeviceLogin',
          'type' => TType::BOOL,
          ),
        25 => array(
          'var' => 'privacyProfileImagePostToMyhome',
          'type' => TType::BOOL,
          ),
        26 => array(
          'var' => 'privacyReceiveMessagesFromNotFriend',
          'type' => TType::BOOL,
          ),
        30 => array(
          'var' => 'contactMyTicket',
          'type' => TType::STRING,
          ),
        40 => array(
          'var' => 'identityProvider',
          'type' => TType::I32,
          ),
        41 => array(
          'var' => 'identityIdentifier',
          'type' => TType::STRING,
          ),
        42 => array(
          'var' => 'snsAccounts',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        43 => array(
          'var' => 'phoneRegistration',
          'type' => TType::BOOL,
          ),
        44 => array(
          'var' => 'emailConfirmationStatus',
          'type' => TType::I32,
          ),
        50 => array(
          'var' => 'preferenceLocale',
          'type' => TType::STRING,
          ),
        60 => array(
          'var' => 'customModes',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['notificationEnable'])) {
        $this->notificationEnable = $vals['notificationEnable'];
      }
      if (isset($vals['notificationMuteExpiration'])) {
        $this->notificationMuteExpiration = $vals['notificationMuteExpiration'];
      }
      if (isset($vals['notificationNewMessage'])) {
        $this->notificationNewMessage = $vals['notificationNewMessage'];
      }
      if (isset($vals['notificationGroupInvitation'])) {
        $this->notificationGroupInvitation = $vals['notificationGroupInvitation'];
      }
      if (isset($vals['notificationShowMessage'])) {
        $this->notificationShowMessage = $vals['notificationShowMessage'];
      }
      if (isset($vals['notificationIncomingCall'])) {
        $this->notificationIncomingCall = $vals['notificationIncomingCall'];
      }
      if (isset($vals['notificationSoundMessage'])) {
        $this->notificationSoundMessage = $vals['notificationSoundMessage'];
      }
      if (isset($vals['notificationSoundGroup'])) {
        $this->notificationSoundGroup = $vals['notificationSoundGroup'];
      }
      if (isset($vals['notificationDisabledWithSub'])) {
        $this->notificationDisabledWithSub = $vals['notificationDisabledWithSub'];
      }
      if (isset($vals['privacySyncContacts'])) {
        $this->privacySyncContacts = $vals['privacySyncContacts'];
      }
      if (isset($vals['privacySearchByPhoneNumber'])) {
        $this->privacySearchByPhoneNumber = $vals['privacySearchByPhoneNumber'];
      }
      if (isset($vals['privacySearchByUserid'])) {
        $this->privacySearchByUserid = $vals['privacySearchByUserid'];
      }
      if (isset($vals['privacySearchByEmail'])) {
        $this->privacySearchByEmail = $vals['privacySearchByEmail'];
      }
      if (isset($vals['privacyAllowSecondaryDeviceLogin'])) {
        $this->privacyAllowSecondaryDeviceLogin = $vals['privacyAllowSecondaryDeviceLogin'];
      }
      if (isset($vals['privacyProfileImagePostToMyhome'])) {
        $this->privacyProfileImagePostToMyhome = $vals['privacyProfileImagePostToMyhome'];
      }
      if (isset($vals['privacyReceiveMessagesFromNotFriend'])) {
        $this->privacyReceiveMessagesFromNotFriend = $vals['privacyReceiveMessagesFromNotFriend'];
      }
      if (isset($vals['contactMyTicket'])) {
        $this->contactMyTicket = $vals['contactMyTicket'];
      }
      if (isset($vals['identityProvider'])) {
        $this->identityProvider = $vals['identityProvider'];
      }
      if (isset($vals['identityIdentifier'])) {
        $this->identityIdentifier = $vals['identityIdentifier'];
      }
      if (isset($vals['snsAccounts'])) {
        $this->snsAccounts = $vals['snsAccounts'];
      }
      if (isset($vals['phoneRegistration'])) {
        $this->phoneRegistration = $vals['phoneRegistration'];
      }
      if (isset($vals['emailConfirmationStatus'])) {
        $this->emailConfirmationStatus = $vals['emailConfirmationStatus'];
      }
      if (isset($vals['preferenceLocale'])) {
        $this->preferenceLocale = $vals['preferenceLocale'];
      }
      if (isset($vals['customModes'])) {
        $this->customModes = $vals['customModes'];
      }
    }
  }

  public function getName() {
    return 'Settings';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationEnable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->notificationMuteExpiration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationNewMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationGroupInvitation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationShowMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationIncomingCall);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->notificationSoundMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->notificationSoundGroup);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationDisabledWithSub);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->privacySyncContacts);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->privacySearchByPhoneNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->privacySearchByUserid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->privacySearchByEmail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->privacyAllowSecondaryDeviceLogin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->privacyProfileImagePostToMyhome);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->privacyReceiveMessagesFromNotFriend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contactMyTicket);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 40:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->identityProvider);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 41:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->identityIdentifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 42:
          if ($ftype == TType::MAP) {
            $this->snsAccounts = array();
            $_size95 = 0;
            $_ktype96 = 0;
            $_vtype97 = 0;
            $xfer += $input->readMapBegin($_ktype96, $_vtype97, $_size95);
            for ($_i99 = 0; $_i99 < $_size95; ++$_i99)
            {
              $key100 = 0;
              $val101 = '';
              $xfer += $input->readI32($key100);
              $xfer += $input->readString($val101);
              $this->snsAccounts[$key100] = $val101;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 43:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->phoneRegistration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 44:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->emailConfirmationStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 50:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->preferenceLocale);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 60:
          if ($ftype == TType::MAP) {
            $this->customModes = array();
            $_size102 = 0;
            $_ktype103 = 0;
            $_vtype104 = 0;
            $xfer += $input->readMapBegin($_ktype103, $_vtype104, $_size102);
            for ($_i106 = 0; $_i106 < $_size102; ++$_i106)
            {
              $key107 = 0;
              $val108 = '';
              $xfer += $input->readI32($key107);
              $xfer += $input->readString($val108);
              $this->customModes[$key107] = $val108;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Settings');
    if ($this->notificationEnable !== null) {
      $xfer += $output->writeFieldBegin('notificationEnable', TType::BOOL, 10);
      $xfer += $output->writeBool($this->notificationEnable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationMuteExpiration !== null) {
      $xfer += $output->writeFieldBegin('notificationMuteExpiration', TType::I64, 11);
      $xfer += $output->writeI64($this->notificationMuteExpiration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationNewMessage !== null) {
      $xfer += $output->writeFieldBegin('notificationNewMessage', TType::BOOL, 12);
      $xfer += $output->writeBool($this->notificationNewMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationGroupInvitation !== null) {
      $xfer += $output->writeFieldBegin('notificationGroupInvitation', TType::BOOL, 13);
      $xfer += $output->writeBool($this->notificationGroupInvitation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationShowMessage !== null) {
      $xfer += $output->writeFieldBegin('notificationShowMessage', TType::BOOL, 14);
      $xfer += $output->writeBool($this->notificationShowMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationIncomingCall !== null) {
      $xfer += $output->writeFieldBegin('notificationIncomingCall', TType::BOOL, 15);
      $xfer += $output->writeBool($this->notificationIncomingCall);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationSoundMessage !== null) {
      $xfer += $output->writeFieldBegin('notificationSoundMessage', TType::STRING, 16);
      $xfer += $output->writeString($this->notificationSoundMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationSoundGroup !== null) {
      $xfer += $output->writeFieldBegin('notificationSoundGroup', TType::STRING, 17);
      $xfer += $output->writeString($this->notificationSoundGroup);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationDisabledWithSub !== null) {
      $xfer += $output->writeFieldBegin('notificationDisabledWithSub', TType::BOOL, 18);
      $xfer += $output->writeBool($this->notificationDisabledWithSub);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacySyncContacts !== null) {
      $xfer += $output->writeFieldBegin('privacySyncContacts', TType::BOOL, 20);
      $xfer += $output->writeBool($this->privacySyncContacts);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacySearchByPhoneNumber !== null) {
      $xfer += $output->writeFieldBegin('privacySearchByPhoneNumber', TType::BOOL, 21);
      $xfer += $output->writeBool($this->privacySearchByPhoneNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacySearchByUserid !== null) {
      $xfer += $output->writeFieldBegin('privacySearchByUserid', TType::BOOL, 22);
      $xfer += $output->writeBool($this->privacySearchByUserid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacySearchByEmail !== null) {
      $xfer += $output->writeFieldBegin('privacySearchByEmail', TType::BOOL, 23);
      $xfer += $output->writeBool($this->privacySearchByEmail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacyAllowSecondaryDeviceLogin !== null) {
      $xfer += $output->writeFieldBegin('privacyAllowSecondaryDeviceLogin', TType::BOOL, 24);
      $xfer += $output->writeBool($this->privacyAllowSecondaryDeviceLogin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacyProfileImagePostToMyhome !== null) {
      $xfer += $output->writeFieldBegin('privacyProfileImagePostToMyhome', TType::BOOL, 25);
      $xfer += $output->writeBool($this->privacyProfileImagePostToMyhome);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacyReceiveMessagesFromNotFriend !== null) {
      $xfer += $output->writeFieldBegin('privacyReceiveMessagesFromNotFriend', TType::BOOL, 26);
      $xfer += $output->writeBool($this->privacyReceiveMessagesFromNotFriend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contactMyTicket !== null) {
      $xfer += $output->writeFieldBegin('contactMyTicket', TType::STRING, 30);
      $xfer += $output->writeString($this->contactMyTicket);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identityProvider !== null) {
      $xfer += $output->writeFieldBegin('identityProvider', TType::I32, 40);
      $xfer += $output->writeI32($this->identityProvider);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identityIdentifier !== null) {
      $xfer += $output->writeFieldBegin('identityIdentifier', TType::STRING, 41);
      $xfer += $output->writeString($this->identityIdentifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snsAccounts !== null) {
      if (!is_array($this->snsAccounts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('snsAccounts', TType::MAP, 42);
      {
        $output->writeMapBegin(TType::I32, TType::STRING, count($this->snsAccounts));
        {
          foreach ($this->snsAccounts as $kiter109 => $viter110)
          {
            $xfer += $output->writeI32($kiter109);
            $xfer += $output->writeString($viter110);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phoneRegistration !== null) {
      $xfer += $output->writeFieldBegin('phoneRegistration', TType::BOOL, 43);
      $xfer += $output->writeBool($this->phoneRegistration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->emailConfirmationStatus !== null) {
      $xfer += $output->writeFieldBegin('emailConfirmationStatus', TType::I32, 44);
      $xfer += $output->writeI32($this->emailConfirmationStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preferenceLocale !== null) {
      $xfer += $output->writeFieldBegin('preferenceLocale', TType::STRING, 50);
      $xfer += $output->writeString($this->preferenceLocale);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->customModes !== null) {
      if (!is_array($this->customModes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('customModes', TType::MAP, 60);
      {
        $output->writeMapBegin(TType::I32, TType::STRING, count($this->customModes));
        {
          foreach ($this->customModes as $kiter111 => $viter112)
          {
            $xfer += $output->writeI32($kiter111);
            $xfer += $output->writeString($viter112);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SnsFriend {
  static $_TSPEC;

  public $snsUserId = null;
  public $snsUserName = null;
  public $snsIdType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'snsUserId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'snsUserName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'snsIdType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['snsUserId'])) {
        $this->snsUserId = $vals['snsUserId'];
      }
      if (isset($vals['snsUserName'])) {
        $this->snsUserName = $vals['snsUserName'];
      }
      if (isset($vals['snsIdType'])) {
        $this->snsIdType = $vals['snsIdType'];
      }
    }
  }

  public function getName() {
    return 'SnsFriend';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snsUserId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snsUserName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->snsIdType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SnsFriend');
    if ($this->snsUserId !== null) {
      $xfer += $output->writeFieldBegin('snsUserId', TType::STRING, 1);
      $xfer += $output->writeString($this->snsUserId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snsUserName !== null) {
      $xfer += $output->writeFieldBegin('snsUserName', TType::STRING, 2);
      $xfer += $output->writeString($this->snsUserName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snsIdType !== null) {
      $xfer += $output->writeFieldBegin('snsIdType', TType::I32, 3);
      $xfer += $output->writeI32($this->snsIdType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SnsFriendContactRegistration {
  static $_TSPEC;

  public $contact = null;
  public $snsIdType = null;
  public $snsUserId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'contact',
          'type' => TType::STRUCT,
          'class' => '\Contact',
          ),
        2 => array(
          'var' => 'snsIdType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'snsUserId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['contact'])) {
        $this->contact = $vals['contact'];
      }
      if (isset($vals['snsIdType'])) {
        $this->snsIdType = $vals['snsIdType'];
      }
      if (isset($vals['snsUserId'])) {
        $this->snsUserId = $vals['snsUserId'];
      }
    }
  }

  public function getName() {
    return 'SnsFriendContactRegistration';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->contact = new \Contact();
            $xfer += $this->contact->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->snsIdType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snsUserId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SnsFriendContactRegistration');
    if ($this->contact !== null) {
      if (!is_object($this->contact)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contact', TType::STRUCT, 1);
      $xfer += $this->contact->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snsIdType !== null) {
      $xfer += $output->writeFieldBegin('snsIdType', TType::I32, 2);
      $xfer += $output->writeI32($this->snsIdType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snsUserId !== null) {
      $xfer += $output->writeFieldBegin('snsUserId', TType::STRING, 3);
      $xfer += $output->writeString($this->snsUserId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SnsFriendModification {
  static $_TSPEC;

  public $type = null;
  public $snsFriend = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'snsFriend',
          'type' => TType::STRUCT,
          'class' => '\SnsFriend',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['snsFriend'])) {
        $this->snsFriend = $vals['snsFriend'];
      }
    }
  }

  public function getName() {
    return 'SnsFriendModification';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->snsFriend = new \SnsFriend();
            $xfer += $this->snsFriend->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SnsFriendModification');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snsFriend !== null) {
      if (!is_object($this->snsFriend)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('snsFriend', TType::STRUCT, 2);
      $xfer += $this->snsFriend->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SnsIdUserStatus {
  static $_TSPEC;

  public $userExisting = null;
  public $phoneNumberRegistered = null;
  public $sameDevice = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userExisting',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'phoneNumberRegistered',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'sameDevice',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userExisting'])) {
        $this->userExisting = $vals['userExisting'];
      }
      if (isset($vals['phoneNumberRegistered'])) {
        $this->phoneNumberRegistered = $vals['phoneNumberRegistered'];
      }
      if (isset($vals['sameDevice'])) {
        $this->sameDevice = $vals['sameDevice'];
      }
    }
  }

  public function getName() {
    return 'SnsIdUserStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->userExisting);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->phoneNumberRegistered);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->sameDevice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SnsIdUserStatus');
    if ($this->userExisting !== null) {
      $xfer += $output->writeFieldBegin('userExisting', TType::BOOL, 1);
      $xfer += $output->writeBool($this->userExisting);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phoneNumberRegistered !== null) {
      $xfer += $output->writeFieldBegin('phoneNumberRegistered', TType::BOOL, 2);
      $xfer += $output->writeBool($this->phoneNumberRegistered);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sameDevice !== null) {
      $xfer += $output->writeFieldBegin('sameDevice', TType::BOOL, 3);
      $xfer += $output->writeBool($this->sameDevice);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SystemConfiguration {
  static $_TSPEC;

  public $endpoint = null;
  public $endpointSsl = null;
  public $updateUrl = null;
  public $c2dmAccount = null;
  public $nniServer = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'endpoint',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'endpointSsl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'updateUrl',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'c2dmAccount',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'nniServer',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['endpoint'])) {
        $this->endpoint = $vals['endpoint'];
      }
      if (isset($vals['endpointSsl'])) {
        $this->endpointSsl = $vals['endpointSsl'];
      }
      if (isset($vals['updateUrl'])) {
        $this->updateUrl = $vals['updateUrl'];
      }
      if (isset($vals['c2dmAccount'])) {
        $this->c2dmAccount = $vals['c2dmAccount'];
      }
      if (isset($vals['nniServer'])) {
        $this->nniServer = $vals['nniServer'];
      }
    }
  }

  public function getName() {
    return 'SystemConfiguration';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endpoint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endpointSsl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->updateUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->c2dmAccount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nniServer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SystemConfiguration');
    if ($this->endpoint !== null) {
      $xfer += $output->writeFieldBegin('endpoint', TType::STRING, 1);
      $xfer += $output->writeString($this->endpoint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endpointSsl !== null) {
      $xfer += $output->writeFieldBegin('endpointSsl', TType::STRING, 2);
      $xfer += $output->writeString($this->endpointSsl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updateUrl !== null) {
      $xfer += $output->writeFieldBegin('updateUrl', TType::STRING, 3);
      $xfer += $output->writeString($this->updateUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->c2dmAccount !== null) {
      $xfer += $output->writeFieldBegin('c2dmAccount', TType::STRING, 11);
      $xfer += $output->writeString($this->c2dmAccount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nniServer !== null) {
      $xfer += $output->writeFieldBegin('nniServer', TType::STRING, 12);
      $xfer += $output->writeString($this->nniServer);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TalkException extends TException {
  static $_TSPEC;

  public $code = null;
  public $reason = null;
  public $parameterMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'reason',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parameterMap',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
      if (isset($vals['parameterMap'])) {
        $this->parameterMap = $vals['parameterMap'];
      }
    }
  }

  public function getName() {
    return 'TalkException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->parameterMap = array();
            $_size113 = 0;
            $_ktype114 = 0;
            $_vtype115 = 0;
            $xfer += $input->readMapBegin($_ktype114, $_vtype115, $_size113);
            for ($_i117 = 0; $_i117 < $_size113; ++$_i117)
            {
              $key118 = '';
              $val119 = '';
              $xfer += $input->readString($key118);
              $xfer += $input->readString($val119);
              $this->parameterMap[$key118] = $val119;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TalkException');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::STRING, 2);
      $xfer += $output->writeString($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parameterMap !== null) {
      if (!is_array($this->parameterMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('parameterMap', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->parameterMap));
        {
          foreach ($this->parameterMap as $kiter120 => $viter121)
          {
            $xfer += $output->writeString($kiter120);
            $xfer += $output->writeString($viter121);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Ticket {
  static $_TSPEC;

  public $id = null;
  public $expirationTime = null;
  public $maxUseCount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'expirationTime',
          'type' => TType::I64,
          ),
        21 => array(
          'var' => 'maxUseCount',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['expirationTime'])) {
        $this->expirationTime = $vals['expirationTime'];
      }
      if (isset($vals['maxUseCount'])) {
        $this->maxUseCount = $vals['maxUseCount'];
      }
    }
  }

  public function getName() {
    return 'Ticket';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expirationTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxUseCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Ticket');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expirationTime !== null) {
      $xfer += $output->writeFieldBegin('expirationTime', TType::I64, 10);
      $xfer += $output->writeI64($this->expirationTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxUseCount !== null) {
      $xfer += $output->writeFieldBegin('maxUseCount', TType::I32, 21);
      $xfer += $output->writeI32($this->maxUseCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TMessageBox {
  static $_TSPEC;

  public $id = null;
  public $channelId = null;
  public $lastSeq = null;
  public $unreadCount = null;
  public $lastModifiedTime = null;
  public $status = null;
  public $midType = null;
  public $lastMessages = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'channelId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'lastSeq',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'unreadCount',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'lastModifiedTime',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'midType',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'lastMessages',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Message',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['channelId'])) {
        $this->channelId = $vals['channelId'];
      }
      if (isset($vals['lastSeq'])) {
        $this->lastSeq = $vals['lastSeq'];
      }
      if (isset($vals['unreadCount'])) {
        $this->unreadCount = $vals['unreadCount'];
      }
      if (isset($vals['lastModifiedTime'])) {
        $this->lastModifiedTime = $vals['lastModifiedTime'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['midType'])) {
        $this->midType = $vals['midType'];
      }
      if (isset($vals['lastMessages'])) {
        $this->lastMessages = $vals['lastMessages'];
      }
    }
  }

  public function getName() {
    return 'TMessageBox';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channelId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->unreadCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastModifiedTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->midType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->lastMessages = array();
            $_size122 = 0;
            $_etype125 = 0;
            $xfer += $input->readListBegin($_etype125, $_size122);
            for ($_i126 = 0; $_i126 < $_size122; ++$_i126)
            {
              $elem127 = null;
              $elem127 = new \Message();
              $xfer += $elem127->read($input);
              $this->lastMessages []= $elem127;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TMessageBox');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channelId !== null) {
      $xfer += $output->writeFieldBegin('channelId', TType::STRING, 2);
      $xfer += $output->writeString($this->channelId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastSeq !== null) {
      $xfer += $output->writeFieldBegin('lastSeq', TType::I64, 5);
      $xfer += $output->writeI64($this->lastSeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unreadCount !== null) {
      $xfer += $output->writeFieldBegin('unreadCount', TType::I64, 6);
      $xfer += $output->writeI64($this->unreadCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastModifiedTime !== null) {
      $xfer += $output->writeFieldBegin('lastModifiedTime', TType::I64, 7);
      $xfer += $output->writeI64($this->lastModifiedTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 8);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->midType !== null) {
      $xfer += $output->writeFieldBegin('midType', TType::I32, 9);
      $xfer += $output->writeI32($this->midType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastMessages !== null) {
      if (!is_array($this->lastMessages)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lastMessages', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->lastMessages));
        {
          foreach ($this->lastMessages as $iter128)
          {
            $xfer += $iter128->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TMessageBoxWrapUp {
  static $_TSPEC;

  public $messageBox = null;
  public $name = null;
  public $contacts = null;
  public $pictureRevision = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'messageBox',
          'type' => TType::STRUCT,
          'class' => '\TMessageBox',
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'contacts',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Contact',
            ),
          ),
        4 => array(
          'var' => 'pictureRevision',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['messageBox'])) {
        $this->messageBox = $vals['messageBox'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['contacts'])) {
        $this->contacts = $vals['contacts'];
      }
      if (isset($vals['pictureRevision'])) {
        $this->pictureRevision = $vals['pictureRevision'];
      }
    }
  }

  public function getName() {
    return 'TMessageBoxWrapUp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->messageBox = new \TMessageBox();
            $xfer += $this->messageBox->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->contacts = array();
            $_size129 = 0;
            $_etype132 = 0;
            $xfer += $input->readListBegin($_etype132, $_size129);
            for ($_i133 = 0; $_i133 < $_size129; ++$_i133)
            {
              $elem134 = null;
              $elem134 = new \Contact();
              $xfer += $elem134->read($input);
              $this->contacts []= $elem134;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pictureRevision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TMessageBoxWrapUp');
    if ($this->messageBox !== null) {
      if (!is_object($this->messageBox)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('messageBox', TType::STRUCT, 1);
      $xfer += $this->messageBox->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contacts !== null) {
      if (!is_array($this->contacts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('contacts', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->contacts));
        {
          foreach ($this->contacts as $iter135)
          {
            $xfer += $iter135->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pictureRevision !== null) {
      $xfer += $output->writeFieldBegin('pictureRevision', TType::STRING, 4);
      $xfer += $output->writeString($this->pictureRevision);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TMessageBoxWrapUpResponse {
  static $_TSPEC;

  public $messageBoxWrapUpList = null;
  public $totalSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'messageBoxWrapUpList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TMessageBoxWrapUp',
            ),
          ),
        2 => array(
          'var' => 'totalSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['messageBoxWrapUpList'])) {
        $this->messageBoxWrapUpList = $vals['messageBoxWrapUpList'];
      }
      if (isset($vals['totalSize'])) {
        $this->totalSize = $vals['totalSize'];
      }
    }
  }

  public function getName() {
    return 'TMessageBoxWrapUpResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->messageBoxWrapUpList = array();
            $_size136 = 0;
            $_etype139 = 0;
            $xfer += $input->readListBegin($_etype139, $_size136);
            for ($_i140 = 0; $_i140 < $_size136; ++$_i140)
            {
              $elem141 = null;
              $elem141 = new \TMessageBoxWrapUp();
              $xfer += $elem141->read($input);
              $this->messageBoxWrapUpList []= $elem141;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TMessageBoxWrapUpResponse');
    if ($this->messageBoxWrapUpList !== null) {
      if (!is_array($this->messageBoxWrapUpList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('messageBoxWrapUpList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->messageBoxWrapUpList));
        {
          foreach ($this->messageBoxWrapUpList as $iter142)
          {
            $xfer += $iter142->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalSize !== null) {
      $xfer += $output->writeFieldBegin('totalSize', TType::I32, 2);
      $xfer += $output->writeI32($this->totalSize);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserAuthStatus {
  static $_TSPEC;

  public $phoneNumberRegistered = null;
  public $registeredSnsIdTypes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'phoneNumberRegistered',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'registeredSnsIdTypes',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['phoneNumberRegistered'])) {
        $this->phoneNumberRegistered = $vals['phoneNumberRegistered'];
      }
      if (isset($vals['registeredSnsIdTypes'])) {
        $this->registeredSnsIdTypes = $vals['registeredSnsIdTypes'];
      }
    }
  }

  public function getName() {
    return 'UserAuthStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->phoneNumberRegistered);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->registeredSnsIdTypes = array();
            $_size143 = 0;
            $_etype146 = 0;
            $xfer += $input->readListBegin($_etype146, $_size143);
            for ($_i147 = 0; $_i147 < $_size143; ++$_i147)
            {
              $elem148 = null;
              $xfer += $input->readI32($elem148);
              $this->registeredSnsIdTypes []= $elem148;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserAuthStatus');
    if ($this->phoneNumberRegistered !== null) {
      $xfer += $output->writeFieldBegin('phoneNumberRegistered', TType::BOOL, 1);
      $xfer += $output->writeBool($this->phoneNumberRegistered);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->registeredSnsIdTypes !== null) {
      if (!is_array($this->registeredSnsIdTypes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('registeredSnsIdTypes', TType::LST, 2);
      {
        $output->writeListBegin(TType::I32, count($this->registeredSnsIdTypes));
        {
          foreach ($this->registeredSnsIdTypes as $iter149)
          {
            $xfer += $output->writeI32($iter149);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class VerificationSessionData {
  static $_TSPEC;

  public $sessionId = null;
  public $method = null;
  public $callback = null;
  public $normalizedPhone = null;
  public $countryCode = null;
  public $nationalSignificantNumber = null;
  public $availableVerificationMethods = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sessionId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'method',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'callback',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'normalizedPhone',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'countryCode',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'nationalSignificantNumber',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'availableVerificationMethods',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sessionId'])) {
        $this->sessionId = $vals['sessionId'];
      }
      if (isset($vals['method'])) {
        $this->method = $vals['method'];
      }
      if (isset($vals['callback'])) {
        $this->callback = $vals['callback'];
      }
      if (isset($vals['normalizedPhone'])) {
        $this->normalizedPhone = $vals['normalizedPhone'];
      }
      if (isset($vals['countryCode'])) {
        $this->countryCode = $vals['countryCode'];
      }
      if (isset($vals['nationalSignificantNumber'])) {
        $this->nationalSignificantNumber = $vals['nationalSignificantNumber'];
      }
      if (isset($vals['availableVerificationMethods'])) {
        $this->availableVerificationMethods = $vals['availableVerificationMethods'];
      }
    }
  }

  public function getName() {
    return 'VerificationSessionData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sessionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->method);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->callback);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->normalizedPhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->countryCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nationalSignificantNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->availableVerificationMethods = array();
            $_size150 = 0;
            $_etype153 = 0;
            $xfer += $input->readListBegin($_etype153, $_size150);
            for ($_i154 = 0; $_i154 < $_size150; ++$_i154)
            {
              $elem155 = null;
              $xfer += $input->readI32($elem155);
              $this->availableVerificationMethods []= $elem155;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('VerificationSessionData');
    if ($this->sessionId !== null) {
      $xfer += $output->writeFieldBegin('sessionId', TType::STRING, 1);
      $xfer += $output->writeString($this->sessionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->method !== null) {
      $xfer += $output->writeFieldBegin('method', TType::I32, 2);
      $xfer += $output->writeI32($this->method);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->callback !== null) {
      $xfer += $output->writeFieldBegin('callback', TType::STRING, 3);
      $xfer += $output->writeString($this->callback);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->normalizedPhone !== null) {
      $xfer += $output->writeFieldBegin('normalizedPhone', TType::STRING, 4);
      $xfer += $output->writeString($this->normalizedPhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->countryCode !== null) {
      $xfer += $output->writeFieldBegin('countryCode', TType::STRING, 5);
      $xfer += $output->writeString($this->countryCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nationalSignificantNumber !== null) {
      $xfer += $output->writeFieldBegin('nationalSignificantNumber', TType::STRING, 6);
      $xfer += $output->writeString($this->nationalSignificantNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->availableVerificationMethods !== null) {
      if (!is_array($this->availableVerificationMethods)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('availableVerificationMethods', TType::LST, 7);
      {
        $output->writeListBegin(TType::I32, count($this->availableVerificationMethods));
        {
          foreach ($this->availableVerificationMethods as $iter156)
          {
            $xfer += $output->writeI32($iter156);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WapInvitation {
  static $_TSPEC;

  public $type = null;
  public $inviteeEmail = null;
  public $inviterMid = null;
  public $roomMid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'inviteeEmail',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'inviterMid',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'roomMid',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['inviteeEmail'])) {
        $this->inviteeEmail = $vals['inviteeEmail'];
      }
      if (isset($vals['inviterMid'])) {
        $this->inviterMid = $vals['inviterMid'];
      }
      if (isset($vals['roomMid'])) {
        $this->roomMid = $vals['roomMid'];
      }
    }
  }

  public function getName() {
    return 'WapInvitation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->inviteeEmail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->inviterMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->roomMid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WapInvitation');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inviteeEmail !== null) {
      $xfer += $output->writeFieldBegin('inviteeEmail', TType::STRING, 10);
      $xfer += $output->writeString($this->inviteeEmail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inviterMid !== null) {
      $xfer += $output->writeFieldBegin('inviterMid', TType::STRING, 11);
      $xfer += $output->writeString($this->inviterMid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->roomMid !== null) {
      $xfer += $output->writeFieldBegin('roomMid', TType::STRING, 12);
      $xfer += $output->writeString($this->roomMid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


